
var MUnicorn = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(MUnicorn) {
  MUnicorn = MUnicorn || {};

var Module=typeof MUnicorn!=="undefined"?MUnicorn:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require("path").dirname(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",abort);quit_=function(status){process["exit"](status)};Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){arguments_=scriptArgs}else if(typeof arguments!="undefined"){arguments_=arguments}if(typeof quit==="function"){quit_=function(status){quit(status)}}if(typeof print!=="undefined"){if(typeof console==="undefined")console={};console.log=print;console.warn=console.error=typeof printErr!=="undefined"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var STACK_ALIGN=16;function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;return Math.ceil(size/factor)*factor}function convertJsFunctionToWasm(func,sig){if(typeof WebAssembly.Function==="function"){var typeNames={"i":"i32","j":"i64","f":"f32","d":"f64"};var type={parameters:[],results:sig[0]=="v"?[]:[typeNames[sig[0]]]};for(var i=1;i<sig.length;++i){type.parameters.push(typeNames[sig[i]])}return new WebAssembly.Function(type,func)}var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={"i":127,"j":126,"f":125,"d":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet=="v"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{"e":{"f":func}});var wrappedFunc=instance.exports["f"];return wrappedFunc}var freeTableIndexes=[];var functionsInTableMap;function addFunctionWasm(func,sig){var table=wasmTable;if(!functionsInTableMap){functionsInTableMap=new WeakMap;for(var i=0;i<table.length;i++){var item=table.get(i);if(item){functionsInTableMap.set(item,i)}}}if(functionsInTableMap.has(func)){return functionsInTableMap.get(func)}var ret;if(freeTableIndexes.length){ret=freeTableIndexes.pop()}else{ret=table.length;try{table.grow(1)}catch(err){if(!(err instanceof RangeError)){throw err}throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH."}}try{table.set(ret,func)}catch(err){if(!(err instanceof TypeError)){throw err}var wrapped=convertJsFunctionToWasm(func,sig);table.set(ret,wrapped)}functionsInTableMap.set(func,ret);return ret}function removeFunctionWasm(index){functionsInTableMap.delete(wasmTable.get(index));freeTableIndexes.push(index)}function addFunction(func,sig){return addFunctionWasm(func,sig)}function removeFunction(index){removeFunctionWasm(index)}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(typeof WebAssembly!=="object"){abort("no native wasm support detected")}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}var wasmMemory;var wasmTable;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={"string":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},"array":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType==="string")return UTF8ToString(ret);if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var INITIAL_INITIAL_MEMORY=Module["INITIAL_MEMORY"]||16777216;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"]}else{wasmMemory=new WebAssembly.Memory({"initial":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,"maximum":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__)}function preMain(){FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what+="";err(what);ABORT=true;EXITSTATUS=1;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var fileURIPrefix="file://";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix)}var wasmBinaryFile="libunicorn.out.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return Promise.resolve().then(getBinary)}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;wasmTable=Module["asm"]["J"];removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiatedSource(output){receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return{}}var tempDouble;var tempI64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function demangle(func){return func}function demangleAll(text){var regex=/\b_Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}function jsStackTrace(){var error=new Error;if(!error.stack){try{throw new Error}catch(e){error=e}if(!error.stack){return"(no stack trace available)"}}return error.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}function ___assert_fail(condition,filename,line,func){abort("Assertion failed: "+UTF8ToString(condition)+", at: "+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function getRandomDevice(){if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require("crypto");return function(){return crypto_module["randomBytes"](1)[0]}}catch(e){}}return function(){abort("randomDevice")}}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().indexOf("EOF")!=-1)bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};function mmapAlloc(size){var alignedSize=alignMemory(size,16384);var ptr=_malloc(alignedSize);while(size<alignedSize)HEAP8[ptr+size++]=0;return ptr}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name]},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name]},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){assert(address===0);if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}}}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,address,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");var stdout=FS.open("/dev/stdout","w");var stderr=FS.open("/dev/stderr","w")},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message="FS error"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)setErrNo(29);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}path=PATH.join2(dir,path)}return path},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function syscallMmap2(addr,len,prot,flags,fd,off){off<<=12;var ptr;var allocated=false;if((flags&16)!==0&&addr%16384!==0){return-28}if((flags&32)!==0){ptr=_memalign(16384,len);if(!ptr)return-48;_memset(ptr,0,len);allocated=true}else{var info=FS.getStream(fd);if(!info)return-8;var res=FS.mmap(info,addr,len,off,prot,flags);ptr=res.ptr;allocated=res.allocated}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,prot:prot,flags:flags,offset:off};return ptr}function ___sys_mmap2(addr,len,prot,flags,fd,off){try{return syscallMmap2(addr,len,prot,flags,fd,off)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___sys_mprotect(addr,len,size){return 0}function syscallMunmap(addr,len){if((addr|0)===-1||len===0){return-28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);if(info.prot&2){SYSCALLS.doMsync(addr,stream,len,info.flags,info.offset)}FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}function ___sys_munmap(addr,len){try{return syscallMunmap(addr,len)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _abort(){abort()}function _longjmp(env,value){_setThrew(env,value||1);throw"longjmp"}function _emscripten_longjmp(a0,a1){return _longjmp(a0,a1)}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}function _exit(status){exit(status)}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _getTempRet0(){return getTempRet0()|0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _pthread_attr_destroy(attr){return 0}function _pthread_attr_init(attr){return 0}function _pthread_create(){return 6}function _pthread_join(){}function _pthread_sigmask(how,set,oldset){err("pthread_sigmask() is not supported: this is a no-op.");return 0}function _setTempRet0($i){setTempRet0($i|0)}function _sigfillset(set){HEAP32[set>>2]=-1>>>0;return 0}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process["hrtime"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!=="undefined"){_emscripten_get_now=dateNow}else _emscripten_get_now=function(){return performance.now()};function _usleep(useconds){var start=_emscripten_get_now();while(_emscripten_get_now()-start<useconds/1e3){}}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}__ATINIT__.push({func:function(){___wasm_call_ctors()}});var asmLibraryArg={"b":___assert_fail,"F":___sys_mmap2,"t":___sys_mprotect,"G":___sys_munmap,"c":_abort,"g":_emscripten_longjmp,"H":_emscripten_memcpy_big,"I":_emscripten_resize_heap,"j":_exit,"r":_fd_close,"y":_fd_seek,"q":_fd_write,"d":_getTempRet0,"p":_gettimeofday,"h":invoke_ii,"k":invoke_iii,"o":invoke_iiiiii,"i":invoke_iiiiiii,"v":invoke_iij,"u":invoke_iijjii,"f":invoke_vi,"m":invoke_vii,"n":invoke_viii,"l":invoke_viiii,"w":invoke_viij,"x":invoke_vij,"a":wasmMemory,"B":_pthread_attr_destroy,"E":_pthread_attr_init,"C":_pthread_create,"A":_pthread_join,"s":_pthread_sigmask,"e":_setTempRet0,"D":_sigfillset,"z":_usleep};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["K"]).apply(null,arguments)};var _uc_version=Module["_uc_version"]=function(){return(_uc_version=Module["_uc_version"]=Module["asm"]["L"]).apply(null,arguments)};var _uc_errno=Module["_uc_errno"]=function(){return(_uc_errno=Module["_uc_errno"]=Module["asm"]["M"]).apply(null,arguments)};var _uc_strerror=Module["_uc_strerror"]=function(){return(_uc_strerror=Module["_uc_strerror"]=Module["asm"]["N"]).apply(null,arguments)};var _uc_arch_supported=Module["_uc_arch_supported"]=function(){return(_uc_arch_supported=Module["_uc_arch_supported"]=Module["asm"]["O"]).apply(null,arguments)};var _uc_open=Module["_uc_open"]=function(){return(_uc_open=Module["_uc_open"]=Module["asm"]["P"]).apply(null,arguments)};var _uc_close=Module["_uc_close"]=function(){return(_uc_close=Module["_uc_close"]=Module["asm"]["Q"]).apply(null,arguments)};var _uc_reg_read_batch=Module["_uc_reg_read_batch"]=function(){return(_uc_reg_read_batch=Module["_uc_reg_read_batch"]=Module["asm"]["R"]).apply(null,arguments)};var _uc_reg_write_batch=Module["_uc_reg_write_batch"]=function(){return(_uc_reg_write_batch=Module["_uc_reg_write_batch"]=Module["asm"]["S"]).apply(null,arguments)};var _uc_reg_read=Module["_uc_reg_read"]=function(){return(_uc_reg_read=Module["_uc_reg_read"]=Module["asm"]["T"]).apply(null,arguments)};var _uc_reg_write=Module["_uc_reg_write"]=function(){return(_uc_reg_write=Module["_uc_reg_write"]=Module["asm"]["U"]).apply(null,arguments)};var _uc_mem_read=Module["_uc_mem_read"]=function(){return(_uc_mem_read=Module["_uc_mem_read"]=Module["asm"]["V"]).apply(null,arguments)};var _uc_mem_write=Module["_uc_mem_write"]=function(){return(_uc_mem_write=Module["_uc_mem_write"]=Module["asm"]["W"]).apply(null,arguments)};var _uc_emu_start=Module["_uc_emu_start"]=function(){return(_uc_emu_start=Module["_uc_emu_start"]=Module["asm"]["X"]).apply(null,arguments)};var _uc_hook_del=Module["_uc_hook_del"]=function(){return(_uc_hook_del=Module["_uc_hook_del"]=Module["asm"]["Y"]).apply(null,arguments)};var _uc_hook_add=Module["_uc_hook_add"]=function(){return(_uc_hook_add=Module["_uc_hook_add"]=Module["asm"]["Z"]).apply(null,arguments)};var _uc_emu_stop=Module["_uc_emu_stop"]=function(){return(_uc_emu_stop=Module["_uc_emu_stop"]=Module["asm"]["_"]).apply(null,arguments)};var _uc_mem_map=Module["_uc_mem_map"]=function(){return(_uc_mem_map=Module["_uc_mem_map"]=Module["asm"]["$"]).apply(null,arguments)};var _uc_mem_map_ptr=Module["_uc_mem_map_ptr"]=function(){return(_uc_mem_map_ptr=Module["_uc_mem_map_ptr"]=Module["asm"]["aa"]).apply(null,arguments)};var _uc_mem_protect=Module["_uc_mem_protect"]=function(){return(_uc_mem_protect=Module["_uc_mem_protect"]=Module["asm"]["ba"]).apply(null,arguments)};var _uc_mem_unmap=Module["_uc_mem_unmap"]=function(){return(_uc_mem_unmap=Module["_uc_mem_unmap"]=Module["asm"]["ca"]).apply(null,arguments)};var _uc_mem_regions=Module["_uc_mem_regions"]=function(){return(_uc_mem_regions=Module["_uc_mem_regions"]=Module["asm"]["da"]).apply(null,arguments)};var _uc_query=Module["_uc_query"]=function(){return(_uc_query=Module["_uc_query"]=Module["asm"]["ea"]).apply(null,arguments)};var _uc_context_alloc=Module["_uc_context_alloc"]=function(){return(_uc_context_alloc=Module["_uc_context_alloc"]=Module["asm"]["fa"]).apply(null,arguments)};var _uc_free=Module["_uc_free"]=function(){return(_uc_free=Module["_uc_free"]=Module["asm"]["ga"]).apply(null,arguments)};var _uc_context_save=Module["_uc_context_save"]=function(){return(_uc_context_save=Module["_uc_context_save"]=Module["asm"]["ha"]).apply(null,arguments)};var _uc_context_restore=Module["_uc_context_restore"]=function(){return(_uc_context_restore=Module["_uc_context_restore"]=Module["asm"]["ia"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["ja"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["ka"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["la"]).apply(null,arguments)};var stackAlloc=Module["stackAlloc"]=function(){return(stackAlloc=Module["stackAlloc"]=Module["asm"]["ma"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return(_setThrew=Module["_setThrew"]=Module["asm"]["na"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["oa"]).apply(null,arguments)};var _free=Module["_free"]=function(){return(_free=Module["_free"]=Module["asm"]["pa"]).apply(null,arguments)};var _memalign=Module["_memalign"]=function(){return(_memalign=Module["_memalign"]=Module["asm"]["qa"]).apply(null,arguments)};var _memset=Module["_memset"]=function(){return(_memset=Module["_memset"]=Module["asm"]["ra"]).apply(null,arguments)};var dynCall_viij=Module["dynCall_viij"]=function(){return(dynCall_viij=Module["dynCall_viij"]=Module["asm"]["sa"]).apply(null,arguments)};var dynCall_vij=Module["dynCall_vij"]=function(){return(dynCall_vij=Module["dynCall_vij"]=Module["asm"]["ta"]).apply(null,arguments)};var dynCall_iij=Module["dynCall_iij"]=function(){return(dynCall_iij=Module["dynCall_iij"]=Module["asm"]["ua"]).apply(null,arguments)};var dynCall_iijjii=Module["dynCall_iijjii"]=function(){return(dynCall_iijjii=Module["dynCall_iijjii"]=Module["asm"]["va"]).apply(null,arguments)};function invoke_ii(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vij(index,a1,a2,a3){var sp=stackSave();try{dynCall_vij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viij(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_viij(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iij(index,a1,a2,a3){var sp=stackSave();try{return dynCall_iij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iijjii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iijjii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}Module["ccall"]=ccall;Module["setValue"]=setValue;Module["getValue"]=getValue;Module["writeArrayToMemory"]=writeArrayToMemory;Module["addFunction"]=addFunction;Module["removeFunction"]=removeFunction;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&noExitRuntime&&status===0){return}if(noExitRuntime){}else{EXITSTATUS=status;exitRuntime();if(Module["onExit"])Module["onExit"](status);ABORT=true}quit_(status,new ExitStatus(status))}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}noExitRuntime=true;run();


  return MUnicorn.ready
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = MUnicorn;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return MUnicorn; });
    else if (typeof exports === 'object')
      exports["MUnicorn"] = MUnicorn;
    
/**
 * (c) 2018 Libelf.JS
 * Arbitrary integer emulation
 * Based on https://github.com/pierrec/js-cuint
 */

var ElfUInt = function (width) {
    // Configure properties based on bit-width
    var mask = (1 << (((width - 1) % 16) + 1)) - 1;
    var nchunks = (width + 15) / 16;

    // Return class
    return function (value) {
        this.width = width;
        this.chunks = new Uint16Array(nchunks);
        this.mask = mask;

        // Initialization:
        // Several checks are omitted since JavaScript will cast any undefined/NaN's
        // into the appropriate type while writing to the chunks array.
        if (value == null) {
            this.chunks.fill(0);
        } else {
            // Initialize from Number
            if (typeof value === 'number') {
                if (!Number.isSafeInteger(value)) {
                    console.warn(
                        'Libelf.js: number ' + value +
                        ' is beyond 53 bits integer precision, use other initialization formats for better precision'
                    );
                }
                if (value > Math.pow(2, this.width)-1 || value < -Math.pow(2, this.width-1)) {
                    console.warn(
                        'Libelf.js: number ' + value +
                        ' overflows ' + this.width + ' bits width, use larger width to keep higher bits'
                    );
                }
                for (var i = 0; i < this.chunks.length; i++) {
                    // Apply mask on the last chunk to cast to correct width
                    this.chunks[i] = value & (i === this.chunks.length - 1 ? this.mask : 0xFFFF);
                    if (value < 0) {
                        // Fix round off of bits in negative values
                        value -= 65535
                    }
                    value /= 65536;
                }
            }
            // Initialize from String
            if (typeof value === 'string') {
                if (value.toLowerCase().startsWith("0x"))
                    value = value.slice(2);
                for (var i = 0; i < this.chunks.length; i++) {
                    // Force NaN value to be 0
                    this.chunks[i] = parseInt(value.slice(-4), 16) || 0;
                    value.slice(0, -4);
                }
            }
            // Initialize from Array (32-bit entries)
            if (typeof value === 'object' && Array.isArray(value)) {
                for (var i = 0; i < this.chunks.length; i++) {
                    if (i % 2 == 0)
                        this.chunks[i] = (value[(i/2)|0] >>>  0) & 0xFFFF;
                    else
                        this.chunks[i] = (value[(i/2)|0] >>> 16) & 0xFFFF;
                }
            }
            // Initialize from ElfUInt
            if (typeof value === 'object' && !Array.isArray(value)) {
                for (var i = 0; i < this.chunks.length; i++) {
                    this.chunks[i] = value.chunks[i];
                }
            }
        }

        // Methods
        this.clone = function () {
        };

        this.neg = function () {
            return this.not().add(1);
        };
        this.not = function () {
            var value = new this.constructor(this);
            for (var i = 0; i < this.chunks.length; i++)
                value.chunks[i] = ~this.chunks[i];
            return value;
        };
        this.add = function (rhs) {
            var lhs = new this.constructor(this);
            var rhs = new this.constructor(rhs);
            var carry = 0;
            for (var i = 0; i < this.chunks.length; i++) {
                var chunk_lhs = lhs.chunks[i];
                var chunk_rhs = rhs.chunks[i];
                lhs.chunks[i] = chunk_lhs + chunk_rhs + carry;
                carry = ((chunk_lhs + chunk_rhs + carry) > 0xFFFF) ? 1 : 0;
            }
            return lhs;
        };
        this.sub = function (rhs) {
            var lhs = new this.constructor(this);
            var rhs = new this.constructor(rhs);
            return this.add(rhs.neg());
        };
        this.mul = function (rhs) {
            var lhs = new this.constructor(this);
            var rhs = new this.constructor(rhs);
            return lhs;
        };
        this.div = function (rhs) {
            var lhs = new this.constructor(this);
            var rhs = new this.constructor(rhs);
            return lhs;
        };
        this.shl = function (amount) {
            var value = new this.constructor(this);
            return value;
        };
        this.shr = function (amount) {
            var value = new this.constructor(this);
            return value;
        };
        this.ror = function (amount) {
            var value = new this.constructor(this);
            return value;
        };
        this.rol = function (amount) {
            var value = new this.constructor(this);
            return value;
        };

        // Conversion
        this.hex = function () {
            var string = "0x";
            for (var i = this.chunks.length - 1; i >= 0; i--) {
                var chunkstr = this.chunks[i].toString(16);
                chunkstr = "0".repeat(4 - chunkstr.length) + chunkstr;
                string += chunkstr;
            }
            return string;
        }
        this.num = function () {
            var number = 0;
            for (var i = this.chunks.length - 1; i >= 0; i--)
                number = (number * 0x10000) + this.chunks[i];
            if (!Number.isSafeInteger(number)) {
                console.warn(
                    'Libelf.js: number ' + number +
                    ' is beyond 53 bits integer precision, use other conversion formats for better precision'
                );
            }
            return number;
        }

        // Overrides
        this.valueOf = this.num;
    };
};

var ElfUInt8  = ElfUInt(8);
var ElfUInt16 = ElfUInt(16);
var ElfUInt32 = ElfUInt(32);
var ElfUInt64 = ElfUInt(64);

/**
 * (c) 2016-2017 Unicorn.JS
 * Wrapper made by Alexandro Sanchez Bach.
 */

// Emscripten demodularize
MUnicorn().then(function(instance){MUnicorn = instance});

// Number conversion modes
ELF_INT_NUMBER  = 1
ELF_INT_STRING  = 2
ELF_INT_OBJECT  = 3

var uc = {
    // Static
    version: function() {
        major_ptr = MUnicorn._malloc(4);
        minor_ptr = MUnicorn._malloc(4);
        var ret = MUnicorn.ccall('uc_version', 'number',
            ['pointer', 'pointer'], [major_ptr, minor_ptr]);
        major = MUnicorn.getValue(major_ptr, 'i32');
        minor = MUnicorn.getValue(minor_ptr, 'i32');
        MUnicorn._free(major_ptr);
        MUnicorn._free(minor_ptr);
        return ret;
    },

    arch_supported: function(arch) {
        var ret = MUnicorn.ccall('uc_arch_supported', 'number', ['number'], [arch]);
        return ret;
    },

    strerror: function(code) {
        var ret = MUnicorn.ccall('uc_strerror', 'string', ['number'], [code]);
        return ret;
    },

    /**
     * Unicorn object
     */
    Unicorn: function (arch, mode) {
        this.arch = arch;
        this.mode = mode;
        this.handle_ptr = MUnicorn._malloc(4);

        // Methods
        this.reg_write = function (regid, bytes) {
            // Allocate bytes buffer and copy data
            var buffer_len = bytes.length;
            var buffer_ptr = MUnicorn._malloc(buffer_len);
            MUnicorn.writeArrayToMemory(bytes, buffer_ptr);
            // Register write
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_reg_write', 'number',
                ['pointer', 'number', 'pointer'],
                [handle, regid, buffer_ptr]
            );
            // Free memory and handle return code
            MUnicorn._free(buffer_ptr);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_reg_write failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        this.reg_read = function (regid, size) {
            // Allocate space for the output value
            var buffer_ptr = MUnicorn._malloc(size);
            for (var i = 0; i < size; i++) {
                MUnicorn.setValue(buffer_ptr + i, 0, 'i8');
            }
            // Register read
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_reg_read', 'number',
                ['pointer', 'number', 'pointer'],
                [handle, regid, buffer_ptr]
            );
            // Get register value, free memory and handle return code
            var value = new Uint8Array(size);
            for (var i = 0; i < size; i++) {
                value[i] = MUnicorn.getValue(buffer_ptr + i, 'i8');
            }
            MUnicorn._free(buffer_ptr);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_reg_read failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
            return value;
        }

        this.mem_write = function (address, bytes) {
            // Allocate bytes buffer and copy data
            var buffer_len = bytes.length;
            var buffer_ptr = MUnicorn._malloc(buffer_len);
            MUnicorn.writeArrayToMemory(bytes, buffer_ptr);
            
            // Convert address types
            var [addr_lo, addr_hi] = this.__address(address);

            // Write to memory
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_mem_write', 'number',
                ['pointer', 'number', 'number', 'pointer', 'number'],
                [handle, addr_lo, addr_hi, buffer_ptr, buffer_len]
            );
            // Free memory and handle return code
            MUnicorn._free(buffer_ptr);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_mem_write failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        this.mem_read = function (address, size) {
            // Allocate space for the output value
            var buffer_ptr = MUnicorn._malloc(size);
            for (var i = 0; i < size; i++) {
                MUnicorn.setValue(buffer_ptr + i, 0, 'i8');
            }
            
            // Convert address types
            var [addr_lo, addr_hi] = this.__address(address);

            // Read from memory
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_mem_read', 'number',
                ['pointer', 'number', 'number', 'pointer', 'number'],
                [handle, addr_lo, addr_hi, buffer_ptr, size]
            );
            // Get register value, free memory and handle return code
            var buffer = new Uint8Array(size);
            for (var i = 0; i < size; i++) {
                buffer[i] = MUnicorn.getValue(buffer_ptr + i, 'i8');
            }
            MUnicorn._free(buffer_ptr);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_mem_read failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
            return buffer;
        }

        this.mem_map = function (address, size, perms) {
            // Convert address types
            var [addr_lo, addr_hi] = this.__address(address);
            
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_mem_map', 'number',
                ['pointer', 'number', 'number', 'number', 'number'],
                [handle, addr_lo, addr_hi, size, perms]
            );
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_mem_map failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        this.mem_protect = function (address, size, perms) {
            // Convert address types
            var [addr_lo, addr_hi] = this.__address(address);
            
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_mem_protect', 'number',
                ['pointer', 'number', 'number', 'number', 'number'],
                [handle, addr_lo, addr_hi, size, perms]
            );
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_mem_protect failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        this.mem_regions = function () {
            console.error("Unicorn.js: Method mem_regions unimplemented");
        }

        this.mem_unmap = function (address, size) {
            // Convert address types
            var [addr_lo, addr_hi] = this.__address(address);
            
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_mem_unmap', 'number',
                ['pointer', 'number', 'number', 'number'],
                [handle, addr_lo, addr_hi, size]
            );
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_mem_unmap failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        this.hook_add = function (type, user_callback, user_data, begin, end, extra) {
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            // Default arguments
            if (typeof user_data === 'undefined') {
                user_data = {}
            }
            if (typeof begin === 'undefined' &&
                typeof end === 'undefined') {
                begin = 1;
                end = 0;
            }
            // Wrap callback
            var extra_types = ['number'];
            var extra_values = [extra];
            switch (type) {
                case uc.HOOK_INSN:
                    extra_types = ['number'];
                    extra_values = [extra];
                    var callback = (function (handle, user_data) {
                        return function (_, _) {
                            user_callback(handle, user_data);
                        }
                    })(this, user_data);
                    var callback_ptr = MUnicorn.addFunction(callback, 'vii');
                    break;
                // uc_cb_hookintr_t
                case uc.HOOK_INTR:
                    var callback = (function (handle, user_data) {
                        return function (_, intno, _) {
                            user_callback(handle, intno, user_data);
                        }
                    })(this, user_data);
                    var callback_ptr = MUnicorn.addFunction(callback, 'viii');
                    break;
                // uc_cb_hookcode_t
                case uc.HOOK_CODE:
                case uc.HOOK_BLOCK:
                    var callback = (function (handle, user_data) {
                        return function (_, addr_lo, addr_hi, size, _) {
                            user_callback(handle, addr_lo, addr_hi, size, user_data);
                        }
                    })(this, user_data);
                    var callback_ptr = MUnicorn.addFunction(callback, 'viiii');
                    break;
                default:
                    // uc_cb_hookmem_t
                    if ((type & uc.HOOK_MEM_READ) ||
                        (type & uc.HOOK_MEM_WRITE) ||
                        (type & uc.HOOK_MEM_FETCH) ||
                        (type & uc.HOOK_MEM_READ_AFTER)) {
                        var callback = (function (handle, user_data) {
                            return function (_, type, addr_lo, addr_hi, size, value_lo, value_hi, _) {
                                user_callback(handle, type, addr_lo, addr_hi, size, value_lo, value_hi, user_data);
                            }
                        })(this, user_data);
                        var callback_ptr = MUnicorn.addFunction(callback, 'viiiiiiii');
                    }
                    // uc_cb_eventmem_t
                    if ((type & uc.HOOK_MEM_READ_UNMAPPED) ||
                        (type & uc.HOOK_MEM_WRITE_UNMAPPED) ||
                        (type & uc.HOOK_MEM_FETCH_UNMAPPED) ||
                        (type & uc.HOOK_MEM_READ_PROT) ||
                        (type & uc.HOOK_MEM_WRITE_PROT) ||
                        (type & uc.HOOK_MEM_FETCH_PROT)) {
                        var callback = (function (handle, user_data) {
                            return function (_, type, addr_lo, addr_hi, size, value_lo, value_hi, _) {
                                return user_callback(handle, type, addr_lo, addr_hi, size, value_lo, value_hi, user_data);
                            }
                        })(this, user_data);
                        var callback_ptr = MUnicorn.addFunction(callback, 'iiiiiiiii');
                    }
            }
            if (typeof callback === 'undefined') {
                throw 'Unicorn.js: Unimplemented hook type'
            }
            // Set hook
            var hook_ptr = MUnicorn._malloc(4);
            var ret = MUnicorn.ccall('uc_hook_add', 'number',
                ['pointer', 'pointer', 'number', 'pointer', 'pointer',
                    'number', 'number', 'number', 'number', 'number'],
                [handle, hook_ptr, type, callback_ptr, 0,
                    begin, 0, end, 0, extra]
            );
            if (ret != uc.ERR_OK) {
                MUnicorn.removeFunction(callback_ptr);
                MUnicorn._free(hook_ptr);
                var error = 'Unicorn.js: Function uc_mem_unmap failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
            var hook = {
                handle: MUnicorn.getValue(hook_ptr, '*'),
                callback: callback_ptr
            };
            MUnicorn._free(hook_ptr);
            return hook
        }

        this.hook_del = function (hook) {
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_hook_del', 'number',
                ['pointer', 'pointer'],
                [handle, hook.handle]
            );
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_mem_unmap failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
            MUnicorn.removeFunction(hook.callback);
        }

        this.emu_start = function (begin, until, timeout, count) {
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_emu_start', 'number',
                ['pointer', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
                [handle, begin, 0, until, 0, timeout, 0, count]
            );
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_emu_start failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        this.emu_stop = function (begin, until, timeout, count) {
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_emu_stop', 'number', ['pointer'], [handle]);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_emu_stop failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        this.context_alloc = function () {
            console.error('Unicorn.js: Contexts not implemented');
        }

        this.context_free = function () {
            console.error('Unicorn.js: Contexts not implemented');
        }

        this.context_save = function () {
            console.error('Unicorn.js: Contexts not implemented');
        }

        this.context_restore = function () {
            console.error('Unicorn.js: Contexts not implemented');
        }

        this.errno = function() {
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_errno', 'number', ['pointer'], [handle]);
            return ret;
        }

        this.close = function() {
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_close', 'number', ['pointer'], [handle]);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_close failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }

        // Helpers
        this.__integer = function (value, width) {
            if (typeof value === "number") {
                value = [value];
            }
            switch (this.get_integer_type()) {
            case ELF_INT_NUMBER:
                return value[0];
            case ELF_INT_STRING:
                return value
                    .map(x => x.toString(16).toUpperCase())
                    .map(x => '0'.repeat(width/4 - x.length) + x)
                    .reverse().join('');
            case ELF_INT_OBJECT:
                switch (width) {
                case 8:  return new ElfUInt8(value);
                case 16: return new ElfUInt16(value);
                case 32: return new ElfUInt32(value);
                case 64: return new ElfUInt64(value);
                default: throw 'Unexpected width';
                }
            default:
                var error = 'Unimplemented integer type';
                throw error;
            }
        }
        this.__address = function (address) {
            var address_obj = new ElfUInt64(address);
            return [address_obj.chunks[0] + (address_obj.chunks[1]<<16), address_obj.chunks[2] + (address_obj.chunks[3]<<16)];
        }
        this._sizeof = function (type) {
            switch (type) {
                case 'i8':     return 1;
                case 'i16':    return 2;
                case 'i32':    return 4;
                case 'i64':    return 8;
                case 'float':  return 4;
                case 'double': return 8;
                default:       return 0;
            }
        }
        this.reg_write_type = function (regid, type, value) {
            // Allocate space for the output value
            var value_size = this._sizeof(type);
            var value_ptr = MUnicorn._malloc(value_size);
            // Convert integer types
            var value_obj = new (ElfUInt(value_size*8))(value);
            for (var i = 0; i < value_size/2; i++) {
                MUnicorn.setValue(value_ptr + i*2, value_obj.chunks[i], 'i16');
            }
            // Register write
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_reg_write', 'number',
                ['pointer', 'number', 'pointer'],
                [handle, regid, value_ptr]
            );
            // Free memory and handle return code
            MUnicorn._free(value_ptr);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_reg_write failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
        }
        this.reg_write_i8     = function (regid, value) { this.reg_write_type(regid, 'i8', value); }
        this.reg_write_i16    = function (regid, value) { this.reg_write_type(regid, 'i16', value); }
        this.reg_write_i32    = function (regid, value) { this.reg_write_type(regid, 'i32', value); }
        this.reg_write_i64    = function (regid, value) { this.reg_write_type(regid, 'i64', value); }
        this.reg_write_float  = function (regid, value) { this.reg_write_type(regid, 'float', value); }
        this.reg_write_double = function (regid, value) { this.reg_write_type(regid, 'double', value); }

        this.reg_read_type = function (regid, type) {
            // Allocate space for the output value
            var value_size = this._sizeof(type);
            var value_ptr = MUnicorn._malloc(value_size);
            MUnicorn.setValue(value_ptr, 0, type);

            // Register read
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_reg_read', 'number',
                ['pointer', 'number', 'pointer'],
                [handle, regid, value_ptr]
            );
            // Get register value, free memory and handle return code
            var value = MUnicorn.getValue(value_ptr, type);
            if (type === 'i64') {
                    value = [value, MUnicorn.getValue(value_ptr+4, 'i32')]
            }
            // Convert integer types
            if (type.includes('i')) {
                value = this.__integer(value, value_size*8);
            }
            MUnicorn._free(value_ptr);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_reg_read failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
            return value;
        }
        this.reg_read_i8      = function (regid) { return this.reg_read_type(regid, 'i8'); }
        this.reg_read_i16     = function (regid) { return this.reg_read_type(regid, 'i16'); }
        this.reg_read_i32     = function (regid) { return this.reg_read_type(regid, 'i32'); }
        this.reg_read_i64     = function (regid) { return this.reg_read_type(regid, 'i64'); }
        this.reg_read_float   = function (regid) { return this.reg_read_type(regid, 'float'); }
        this.reg_read_double  = function (regid) { return this.reg_read_type(regid, 'double'); }

        this.query_type = function (query_type, result_type) {
            // Allocate space for the output value
            var result_size = this._sizeof(result_type);
            var result_ptr = MUnicorn._malloc(result_size);
            MUnicorn.setValue(value_ptr, 0, result_type);
            // Make query
            var handle = MUnicorn.getValue(this.handle_ptr, '*');
            var ret = MUnicorn.ccall('uc_query', 'number',
                ['pointer', 'number', 'pointer'],
                [handle, query_type, result_ptr]
            );
            // Get result value, free memory and handle return code
            var result = MUnicorn.getValue(result_ptr, result_type);
            if (type === 'i64') {
                result = [result, MUnicorn.getValue(result_ptr+4, 'i32')]
            }
            // Convert integer types
            if (type.includes('i')) {
                result = this.__integer(result, result_size*8);
            }
            MUnicorn._free(result_ptr);
            if (ret != uc.ERR_OK) {
                var error = 'Unicorn.js: Function uc_query failed with code ' + ret + ':\n' + uc.strerror(ret);
                throw error;
            }
            return result;
        }
        this.query_i8      = function (type) { return this.query_type(type, 'i8'); }
        this.query_i16     = function (type) { return this.query_type(type, 'i16'); }
        this.query_i32     = function (type) { return this.query_type(type, 'i32'); }
        this.query_i64     = function (type) { return this.query_type(type, 'i64'); }
        this.query_float   = function (type) { return this.query_type(type, 'float'); }
        this.query_double  = function (type) { return this.query_type(type, 'double'); }
        
        // Configuration
        this.get_integer_type = function () {
            // Using ELF_INT_NUMBER as default for 32 bit backward compatibility
            if (this.integer_type == null) {
                return ELF_INT_NUMBER;
            }
            return this.integer_type;
        }

        this.set_integer_type = function (type) {
            // Please Use ELF_INT_STRING/ELF_INT_OBJECT for 64 bit support
            this.integer_type = type;
        }

        // Constructor
        var ret = MUnicorn.ccall('uc_open', 'number',
            ['number', 'number', 'pointer'],
            [this.arch, this.mode, this.handle_ptr]
        );
        if (ret != uc.ERR_OK) {
            MUnicorn.setValue(this.handle_ptr, 0, '*');
            var error = 'Unicorn.js: Function uc_open failed with code ' + ret + ':\n' + uc.strerror(ret);
            throw error;
        }
    }
};

// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [arm64_const.py]

// ARM64 registers

uc.ARM64_REG_INVALID = 0
uc.ARM64_REG_X29 = 1
uc.ARM64_REG_X30 = 2
uc.ARM64_REG_NZCV = 3
uc.ARM64_REG_SP = 4
uc.ARM64_REG_WSP = 5
uc.ARM64_REG_WZR = 6
uc.ARM64_REG_XZR = 7
uc.ARM64_REG_B0 = 8
uc.ARM64_REG_B1 = 9
uc.ARM64_REG_B2 = 10
uc.ARM64_REG_B3 = 11
uc.ARM64_REG_B4 = 12
uc.ARM64_REG_B5 = 13
uc.ARM64_REG_B6 = 14
uc.ARM64_REG_B7 = 15
uc.ARM64_REG_B8 = 16
uc.ARM64_REG_B9 = 17
uc.ARM64_REG_B10 = 18
uc.ARM64_REG_B11 = 19
uc.ARM64_REG_B12 = 20
uc.ARM64_REG_B13 = 21
uc.ARM64_REG_B14 = 22
uc.ARM64_REG_B15 = 23
uc.ARM64_REG_B16 = 24
uc.ARM64_REG_B17 = 25
uc.ARM64_REG_B18 = 26
uc.ARM64_REG_B19 = 27
uc.ARM64_REG_B20 = 28
uc.ARM64_REG_B21 = 29
uc.ARM64_REG_B22 = 30
uc.ARM64_REG_B23 = 31
uc.ARM64_REG_B24 = 32
uc.ARM64_REG_B25 = 33
uc.ARM64_REG_B26 = 34
uc.ARM64_REG_B27 = 35
uc.ARM64_REG_B28 = 36
uc.ARM64_REG_B29 = 37
uc.ARM64_REG_B30 = 38
uc.ARM64_REG_B31 = 39
uc.ARM64_REG_D0 = 40
uc.ARM64_REG_D1 = 41
uc.ARM64_REG_D2 = 42
uc.ARM64_REG_D3 = 43
uc.ARM64_REG_D4 = 44
uc.ARM64_REG_D5 = 45
uc.ARM64_REG_D6 = 46
uc.ARM64_REG_D7 = 47
uc.ARM64_REG_D8 = 48
uc.ARM64_REG_D9 = 49
uc.ARM64_REG_D10 = 50
uc.ARM64_REG_D11 = 51
uc.ARM64_REG_D12 = 52
uc.ARM64_REG_D13 = 53
uc.ARM64_REG_D14 = 54
uc.ARM64_REG_D15 = 55
uc.ARM64_REG_D16 = 56
uc.ARM64_REG_D17 = 57
uc.ARM64_REG_D18 = 58
uc.ARM64_REG_D19 = 59
uc.ARM64_REG_D20 = 60
uc.ARM64_REG_D21 = 61
uc.ARM64_REG_D22 = 62
uc.ARM64_REG_D23 = 63
uc.ARM64_REG_D24 = 64
uc.ARM64_REG_D25 = 65
uc.ARM64_REG_D26 = 66
uc.ARM64_REG_D27 = 67
uc.ARM64_REG_D28 = 68
uc.ARM64_REG_D29 = 69
uc.ARM64_REG_D30 = 70
uc.ARM64_REG_D31 = 71
uc.ARM64_REG_H0 = 72
uc.ARM64_REG_H1 = 73
uc.ARM64_REG_H2 = 74
uc.ARM64_REG_H3 = 75
uc.ARM64_REG_H4 = 76
uc.ARM64_REG_H5 = 77
uc.ARM64_REG_H6 = 78
uc.ARM64_REG_H7 = 79
uc.ARM64_REG_H8 = 80
uc.ARM64_REG_H9 = 81
uc.ARM64_REG_H10 = 82
uc.ARM64_REG_H11 = 83
uc.ARM64_REG_H12 = 84
uc.ARM64_REG_H13 = 85
uc.ARM64_REG_H14 = 86
uc.ARM64_REG_H15 = 87
uc.ARM64_REG_H16 = 88
uc.ARM64_REG_H17 = 89
uc.ARM64_REG_H18 = 90
uc.ARM64_REG_H19 = 91
uc.ARM64_REG_H20 = 92
uc.ARM64_REG_H21 = 93
uc.ARM64_REG_H22 = 94
uc.ARM64_REG_H23 = 95
uc.ARM64_REG_H24 = 96
uc.ARM64_REG_H25 = 97
uc.ARM64_REG_H26 = 98
uc.ARM64_REG_H27 = 99
uc.ARM64_REG_H28 = 100
uc.ARM64_REG_H29 = 101
uc.ARM64_REG_H30 = 102
uc.ARM64_REG_H31 = 103
uc.ARM64_REG_Q0 = 104
uc.ARM64_REG_Q1 = 105
uc.ARM64_REG_Q2 = 106
uc.ARM64_REG_Q3 = 107
uc.ARM64_REG_Q4 = 108
uc.ARM64_REG_Q5 = 109
uc.ARM64_REG_Q6 = 110
uc.ARM64_REG_Q7 = 111
uc.ARM64_REG_Q8 = 112
uc.ARM64_REG_Q9 = 113
uc.ARM64_REG_Q10 = 114
uc.ARM64_REG_Q11 = 115
uc.ARM64_REG_Q12 = 116
uc.ARM64_REG_Q13 = 117
uc.ARM64_REG_Q14 = 118
uc.ARM64_REG_Q15 = 119
uc.ARM64_REG_Q16 = 120
uc.ARM64_REG_Q17 = 121
uc.ARM64_REG_Q18 = 122
uc.ARM64_REG_Q19 = 123
uc.ARM64_REG_Q20 = 124
uc.ARM64_REG_Q21 = 125
uc.ARM64_REG_Q22 = 126
uc.ARM64_REG_Q23 = 127
uc.ARM64_REG_Q24 = 128
uc.ARM64_REG_Q25 = 129
uc.ARM64_REG_Q26 = 130
uc.ARM64_REG_Q27 = 131
uc.ARM64_REG_Q28 = 132
uc.ARM64_REG_Q29 = 133
uc.ARM64_REG_Q30 = 134
uc.ARM64_REG_Q31 = 135
uc.ARM64_REG_S0 = 136
uc.ARM64_REG_S1 = 137
uc.ARM64_REG_S2 = 138
uc.ARM64_REG_S3 = 139
uc.ARM64_REG_S4 = 140
uc.ARM64_REG_S5 = 141
uc.ARM64_REG_S6 = 142
uc.ARM64_REG_S7 = 143
uc.ARM64_REG_S8 = 144
uc.ARM64_REG_S9 = 145
uc.ARM64_REG_S10 = 146
uc.ARM64_REG_S11 = 147
uc.ARM64_REG_S12 = 148
uc.ARM64_REG_S13 = 149
uc.ARM64_REG_S14 = 150
uc.ARM64_REG_S15 = 151
uc.ARM64_REG_S16 = 152
uc.ARM64_REG_S17 = 153
uc.ARM64_REG_S18 = 154
uc.ARM64_REG_S19 = 155
uc.ARM64_REG_S20 = 156
uc.ARM64_REG_S21 = 157
uc.ARM64_REG_S22 = 158
uc.ARM64_REG_S23 = 159
uc.ARM64_REG_S24 = 160
uc.ARM64_REG_S25 = 161
uc.ARM64_REG_S26 = 162
uc.ARM64_REG_S27 = 163
uc.ARM64_REG_S28 = 164
uc.ARM64_REG_S29 = 165
uc.ARM64_REG_S30 = 166
uc.ARM64_REG_S31 = 167
uc.ARM64_REG_W0 = 168
uc.ARM64_REG_W1 = 169
uc.ARM64_REG_W2 = 170
uc.ARM64_REG_W3 = 171
uc.ARM64_REG_W4 = 172
uc.ARM64_REG_W5 = 173
uc.ARM64_REG_W6 = 174
uc.ARM64_REG_W7 = 175
uc.ARM64_REG_W8 = 176
uc.ARM64_REG_W9 = 177
uc.ARM64_REG_W10 = 178
uc.ARM64_REG_W11 = 179
uc.ARM64_REG_W12 = 180
uc.ARM64_REG_W13 = 181
uc.ARM64_REG_W14 = 182
uc.ARM64_REG_W15 = 183
uc.ARM64_REG_W16 = 184
uc.ARM64_REG_W17 = 185
uc.ARM64_REG_W18 = 186
uc.ARM64_REG_W19 = 187
uc.ARM64_REG_W20 = 188
uc.ARM64_REG_W21 = 189
uc.ARM64_REG_W22 = 190
uc.ARM64_REG_W23 = 191
uc.ARM64_REG_W24 = 192
uc.ARM64_REG_W25 = 193
uc.ARM64_REG_W26 = 194
uc.ARM64_REG_W27 = 195
uc.ARM64_REG_W28 = 196
uc.ARM64_REG_W29 = 197
uc.ARM64_REG_W30 = 198
uc.ARM64_REG_X0 = 199
uc.ARM64_REG_X1 = 200
uc.ARM64_REG_X2 = 201
uc.ARM64_REG_X3 = 202
uc.ARM64_REG_X4 = 203
uc.ARM64_REG_X5 = 204
uc.ARM64_REG_X6 = 205
uc.ARM64_REG_X7 = 206
uc.ARM64_REG_X8 = 207
uc.ARM64_REG_X9 = 208
uc.ARM64_REG_X10 = 209
uc.ARM64_REG_X11 = 210
uc.ARM64_REG_X12 = 211
uc.ARM64_REG_X13 = 212
uc.ARM64_REG_X14 = 213
uc.ARM64_REG_X15 = 214
uc.ARM64_REG_X16 = 215
uc.ARM64_REG_X17 = 216
uc.ARM64_REG_X18 = 217
uc.ARM64_REG_X19 = 218
uc.ARM64_REG_X20 = 219
uc.ARM64_REG_X21 = 220
uc.ARM64_REG_X22 = 221
uc.ARM64_REG_X23 = 222
uc.ARM64_REG_X24 = 223
uc.ARM64_REG_X25 = 224
uc.ARM64_REG_X26 = 225
uc.ARM64_REG_X27 = 226
uc.ARM64_REG_X28 = 227
uc.ARM64_REG_V0 = 228
uc.ARM64_REG_V1 = 229
uc.ARM64_REG_V2 = 230
uc.ARM64_REG_V3 = 231
uc.ARM64_REG_V4 = 232
uc.ARM64_REG_V5 = 233
uc.ARM64_REG_V6 = 234
uc.ARM64_REG_V7 = 235
uc.ARM64_REG_V8 = 236
uc.ARM64_REG_V9 = 237
uc.ARM64_REG_V10 = 238
uc.ARM64_REG_V11 = 239
uc.ARM64_REG_V12 = 240
uc.ARM64_REG_V13 = 241
uc.ARM64_REG_V14 = 242
uc.ARM64_REG_V15 = 243
uc.ARM64_REG_V16 = 244
uc.ARM64_REG_V17 = 245
uc.ARM64_REG_V18 = 246
uc.ARM64_REG_V19 = 247
uc.ARM64_REG_V20 = 248
uc.ARM64_REG_V21 = 249
uc.ARM64_REG_V22 = 250
uc.ARM64_REG_V23 = 251
uc.ARM64_REG_V24 = 252
uc.ARM64_REG_V25 = 253
uc.ARM64_REG_V26 = 254
uc.ARM64_REG_V27 = 255
uc.ARM64_REG_V28 = 256
uc.ARM64_REG_V29 = 257
uc.ARM64_REG_V30 = 258
uc.ARM64_REG_V31 = 259

// pseudo registers
uc.ARM64_REG_PC = 260
uc.ARM64_REG_ENDING = 261

// alias registers
uc.ARM64_REG_IP1 = 215
uc.ARM64_REG_IP0 = 216
uc.ARM64_REG_FP = 1
uc.ARM64_REG_LR = 2
// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [arm_const.py]

// ARM registers

uc.ARM_REG_INVALID = 0
uc.ARM_REG_APSR = 1
uc.ARM_REG_APSR_NZCV = 2
uc.ARM_REG_CPSR = 3
uc.ARM_REG_FPEXC = 4
uc.ARM_REG_FPINST = 5
uc.ARM_REG_FPSCR = 6
uc.ARM_REG_FPSCR_NZCV = 7
uc.ARM_REG_FPSID = 8
uc.ARM_REG_ITSTATE = 9
uc.ARM_REG_LR = 10
uc.ARM_REG_PC = 11
uc.ARM_REG_SP = 12
uc.ARM_REG_SPSR = 13
uc.ARM_REG_D0 = 14
uc.ARM_REG_D1 = 15
uc.ARM_REG_D2 = 16
uc.ARM_REG_D3 = 17
uc.ARM_REG_D4 = 18
uc.ARM_REG_D5 = 19
uc.ARM_REG_D6 = 20
uc.ARM_REG_D7 = 21
uc.ARM_REG_D8 = 22
uc.ARM_REG_D9 = 23
uc.ARM_REG_D10 = 24
uc.ARM_REG_D11 = 25
uc.ARM_REG_D12 = 26
uc.ARM_REG_D13 = 27
uc.ARM_REG_D14 = 28
uc.ARM_REG_D15 = 29
uc.ARM_REG_D16 = 30
uc.ARM_REG_D17 = 31
uc.ARM_REG_D18 = 32
uc.ARM_REG_D19 = 33
uc.ARM_REG_D20 = 34
uc.ARM_REG_D21 = 35
uc.ARM_REG_D22 = 36
uc.ARM_REG_D23 = 37
uc.ARM_REG_D24 = 38
uc.ARM_REG_D25 = 39
uc.ARM_REG_D26 = 40
uc.ARM_REG_D27 = 41
uc.ARM_REG_D28 = 42
uc.ARM_REG_D29 = 43
uc.ARM_REG_D30 = 44
uc.ARM_REG_D31 = 45
uc.ARM_REG_FPINST2 = 46
uc.ARM_REG_MVFR0 = 47
uc.ARM_REG_MVFR1 = 48
uc.ARM_REG_MVFR2 = 49
uc.ARM_REG_Q0 = 50
uc.ARM_REG_Q1 = 51
uc.ARM_REG_Q2 = 52
uc.ARM_REG_Q3 = 53
uc.ARM_REG_Q4 = 54
uc.ARM_REG_Q5 = 55
uc.ARM_REG_Q6 = 56
uc.ARM_REG_Q7 = 57
uc.ARM_REG_Q8 = 58
uc.ARM_REG_Q9 = 59
uc.ARM_REG_Q10 = 60
uc.ARM_REG_Q11 = 61
uc.ARM_REG_Q12 = 62
uc.ARM_REG_Q13 = 63
uc.ARM_REG_Q14 = 64
uc.ARM_REG_Q15 = 65
uc.ARM_REG_R0 = 66
uc.ARM_REG_R1 = 67
uc.ARM_REG_R2 = 68
uc.ARM_REG_R3 = 69
uc.ARM_REG_R4 = 70
uc.ARM_REG_R5 = 71
uc.ARM_REG_R6 = 72
uc.ARM_REG_R7 = 73
uc.ARM_REG_R8 = 74
uc.ARM_REG_R9 = 75
uc.ARM_REG_R10 = 76
uc.ARM_REG_R11 = 77
uc.ARM_REG_R12 = 78
uc.ARM_REG_S0 = 79
uc.ARM_REG_S1 = 80
uc.ARM_REG_S2 = 81
uc.ARM_REG_S3 = 82
uc.ARM_REG_S4 = 83
uc.ARM_REG_S5 = 84
uc.ARM_REG_S6 = 85
uc.ARM_REG_S7 = 86
uc.ARM_REG_S8 = 87
uc.ARM_REG_S9 = 88
uc.ARM_REG_S10 = 89
uc.ARM_REG_S11 = 90
uc.ARM_REG_S12 = 91
uc.ARM_REG_S13 = 92
uc.ARM_REG_S14 = 93
uc.ARM_REG_S15 = 94
uc.ARM_REG_S16 = 95
uc.ARM_REG_S17 = 96
uc.ARM_REG_S18 = 97
uc.ARM_REG_S19 = 98
uc.ARM_REG_S20 = 99
uc.ARM_REG_S21 = 100
uc.ARM_REG_S22 = 101
uc.ARM_REG_S23 = 102
uc.ARM_REG_S24 = 103
uc.ARM_REG_S25 = 104
uc.ARM_REG_S26 = 105
uc.ARM_REG_S27 = 106
uc.ARM_REG_S28 = 107
uc.ARM_REG_S29 = 108
uc.ARM_REG_S30 = 109
uc.ARM_REG_S31 = 110
uc.ARM_REG_C1_C0_2 = 111
uc.ARM_REG_C13_C0_2 = 112
uc.ARM_REG_C13_C0_3 = 113
uc.ARM_REG_ENDING = 114

// alias registers
uc.ARM_REG_R13 = 12
uc.ARM_REG_R14 = 10
uc.ARM_REG_R15 = 11
uc.ARM_REG_SB = 75
uc.ARM_REG_SL = 76
uc.ARM_REG_FP = 77
uc.ARM_REG_IP = 78
// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [m68k_const.py]

// M68K registers

uc.M68K_REG_INVALID = 0
uc.M68K_REG_A0 = 1
uc.M68K_REG_A1 = 2
uc.M68K_REG_A2 = 3
uc.M68K_REG_A3 = 4
uc.M68K_REG_A4 = 5
uc.M68K_REG_A5 = 6
uc.M68K_REG_A6 = 7
uc.M68K_REG_A7 = 8
uc.M68K_REG_D0 = 9
uc.M68K_REG_D1 = 10
uc.M68K_REG_D2 = 11
uc.M68K_REG_D3 = 12
uc.M68K_REG_D4 = 13
uc.M68K_REG_D5 = 14
uc.M68K_REG_D6 = 15
uc.M68K_REG_D7 = 16
uc.M68K_REG_SR = 17
uc.M68K_REG_PC = 18
uc.M68K_REG_ENDING = 19
// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [mips_const.py]

// MIPS registers

uc.MIPS_REG_INVALID = 0

// General purpose registers
uc.MIPS_REG_PC = 1
uc.MIPS_REG_0 = 2
uc.MIPS_REG_1 = 3
uc.MIPS_REG_2 = 4
uc.MIPS_REG_3 = 5
uc.MIPS_REG_4 = 6
uc.MIPS_REG_5 = 7
uc.MIPS_REG_6 = 8
uc.MIPS_REG_7 = 9
uc.MIPS_REG_8 = 10
uc.MIPS_REG_9 = 11
uc.MIPS_REG_10 = 12
uc.MIPS_REG_11 = 13
uc.MIPS_REG_12 = 14
uc.MIPS_REG_13 = 15
uc.MIPS_REG_14 = 16
uc.MIPS_REG_15 = 17
uc.MIPS_REG_16 = 18
uc.MIPS_REG_17 = 19
uc.MIPS_REG_18 = 20
uc.MIPS_REG_19 = 21
uc.MIPS_REG_20 = 22
uc.MIPS_REG_21 = 23
uc.MIPS_REG_22 = 24
uc.MIPS_REG_23 = 25
uc.MIPS_REG_24 = 26
uc.MIPS_REG_25 = 27
uc.MIPS_REG_26 = 28
uc.MIPS_REG_27 = 29
uc.MIPS_REG_28 = 30
uc.MIPS_REG_29 = 31
uc.MIPS_REG_30 = 32
uc.MIPS_REG_31 = 33

// DSP registers
uc.MIPS_REG_DSPCCOND = 34
uc.MIPS_REG_DSPCARRY = 35
uc.MIPS_REG_DSPEFI = 36
uc.MIPS_REG_DSPOUTFLAG = 37
uc.MIPS_REG_DSPOUTFLAG16_19 = 38
uc.MIPS_REG_DSPOUTFLAG20 = 39
uc.MIPS_REG_DSPOUTFLAG21 = 40
uc.MIPS_REG_DSPOUTFLAG22 = 41
uc.MIPS_REG_DSPOUTFLAG23 = 42
uc.MIPS_REG_DSPPOS = 43
uc.MIPS_REG_DSPSCOUNT = 44

// ACC registers
uc.MIPS_REG_AC0 = 45
uc.MIPS_REG_AC1 = 46
uc.MIPS_REG_AC2 = 47
uc.MIPS_REG_AC3 = 48

// COP registers
uc.MIPS_REG_CC0 = 49
uc.MIPS_REG_CC1 = 50
uc.MIPS_REG_CC2 = 51
uc.MIPS_REG_CC3 = 52
uc.MIPS_REG_CC4 = 53
uc.MIPS_REG_CC5 = 54
uc.MIPS_REG_CC6 = 55
uc.MIPS_REG_CC7 = 56

// FPU registers
uc.MIPS_REG_F0 = 57
uc.MIPS_REG_F1 = 58
uc.MIPS_REG_F2 = 59
uc.MIPS_REG_F3 = 60
uc.MIPS_REG_F4 = 61
uc.MIPS_REG_F5 = 62
uc.MIPS_REG_F6 = 63
uc.MIPS_REG_F7 = 64
uc.MIPS_REG_F8 = 65
uc.MIPS_REG_F9 = 66
uc.MIPS_REG_F10 = 67
uc.MIPS_REG_F11 = 68
uc.MIPS_REG_F12 = 69
uc.MIPS_REG_F13 = 70
uc.MIPS_REG_F14 = 71
uc.MIPS_REG_F15 = 72
uc.MIPS_REG_F16 = 73
uc.MIPS_REG_F17 = 74
uc.MIPS_REG_F18 = 75
uc.MIPS_REG_F19 = 76
uc.MIPS_REG_F20 = 77
uc.MIPS_REG_F21 = 78
uc.MIPS_REG_F22 = 79
uc.MIPS_REG_F23 = 80
uc.MIPS_REG_F24 = 81
uc.MIPS_REG_F25 = 82
uc.MIPS_REG_F26 = 83
uc.MIPS_REG_F27 = 84
uc.MIPS_REG_F28 = 85
uc.MIPS_REG_F29 = 86
uc.MIPS_REG_F30 = 87
uc.MIPS_REG_F31 = 88
uc.MIPS_REG_FCC0 = 89
uc.MIPS_REG_FCC1 = 90
uc.MIPS_REG_FCC2 = 91
uc.MIPS_REG_FCC3 = 92
uc.MIPS_REG_FCC4 = 93
uc.MIPS_REG_FCC5 = 94
uc.MIPS_REG_FCC6 = 95
uc.MIPS_REG_FCC7 = 96

// AFPR128
uc.MIPS_REG_W0 = 97
uc.MIPS_REG_W1 = 98
uc.MIPS_REG_W2 = 99
uc.MIPS_REG_W3 = 100
uc.MIPS_REG_W4 = 101
uc.MIPS_REG_W5 = 102
uc.MIPS_REG_W6 = 103
uc.MIPS_REG_W7 = 104
uc.MIPS_REG_W8 = 105
uc.MIPS_REG_W9 = 106
uc.MIPS_REG_W10 = 107
uc.MIPS_REG_W11 = 108
uc.MIPS_REG_W12 = 109
uc.MIPS_REG_W13 = 110
uc.MIPS_REG_W14 = 111
uc.MIPS_REG_W15 = 112
uc.MIPS_REG_W16 = 113
uc.MIPS_REG_W17 = 114
uc.MIPS_REG_W18 = 115
uc.MIPS_REG_W19 = 116
uc.MIPS_REG_W20 = 117
uc.MIPS_REG_W21 = 118
uc.MIPS_REG_W22 = 119
uc.MIPS_REG_W23 = 120
uc.MIPS_REG_W24 = 121
uc.MIPS_REG_W25 = 122
uc.MIPS_REG_W26 = 123
uc.MIPS_REG_W27 = 124
uc.MIPS_REG_W28 = 125
uc.MIPS_REG_W29 = 126
uc.MIPS_REG_W30 = 127
uc.MIPS_REG_W31 = 128
uc.MIPS_REG_HI = 129
uc.MIPS_REG_LO = 130
uc.MIPS_REG_P0 = 131
uc.MIPS_REG_P1 = 132
uc.MIPS_REG_P2 = 133
uc.MIPS_REG_MPL0 = 134
uc.MIPS_REG_MPL1 = 135
uc.MIPS_REG_MPL2 = 136
uc.MIPS_REG_ENDING = 137
uc.MIPS_REG_ZERO = 2
uc.MIPS_REG_AT = 3
uc.MIPS_REG_V0 = 4
uc.MIPS_REG_V1 = 5
uc.MIPS_REG_A0 = 6
uc.MIPS_REG_A1 = 7
uc.MIPS_REG_A2 = 8
uc.MIPS_REG_A3 = 9
uc.MIPS_REG_T0 = 10
uc.MIPS_REG_T1 = 11
uc.MIPS_REG_T2 = 12
uc.MIPS_REG_T3 = 13
uc.MIPS_REG_T4 = 14
uc.MIPS_REG_T5 = 15
uc.MIPS_REG_T6 = 16
uc.MIPS_REG_T7 = 17
uc.MIPS_REG_S0 = 18
uc.MIPS_REG_S1 = 19
uc.MIPS_REG_S2 = 20
uc.MIPS_REG_S3 = 21
uc.MIPS_REG_S4 = 22
uc.MIPS_REG_S5 = 23
uc.MIPS_REG_S6 = 24
uc.MIPS_REG_S7 = 25
uc.MIPS_REG_T8 = 26
uc.MIPS_REG_T9 = 27
uc.MIPS_REG_K0 = 28
uc.MIPS_REG_K1 = 29
uc.MIPS_REG_GP = 30
uc.MIPS_REG_SP = 31
uc.MIPS_REG_FP = 32
uc.MIPS_REG_S8 = 32
uc.MIPS_REG_RA = 33
uc.MIPS_REG_HI0 = 45
uc.MIPS_REG_HI1 = 46
uc.MIPS_REG_HI2 = 47
uc.MIPS_REG_HI3 = 48
uc.MIPS_REG_LO0 = 45
uc.MIPS_REG_LO1 = 46
uc.MIPS_REG_LO2 = 47
uc.MIPS_REG_LO3 = 48
// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [sparc_const.py]

// SPARC registers

uc.SPARC_REG_INVALID = 0
uc.SPARC_REG_F0 = 1
uc.SPARC_REG_F1 = 2
uc.SPARC_REG_F2 = 3
uc.SPARC_REG_F3 = 4
uc.SPARC_REG_F4 = 5
uc.SPARC_REG_F5 = 6
uc.SPARC_REG_F6 = 7
uc.SPARC_REG_F7 = 8
uc.SPARC_REG_F8 = 9
uc.SPARC_REG_F9 = 10
uc.SPARC_REG_F10 = 11
uc.SPARC_REG_F11 = 12
uc.SPARC_REG_F12 = 13
uc.SPARC_REG_F13 = 14
uc.SPARC_REG_F14 = 15
uc.SPARC_REG_F15 = 16
uc.SPARC_REG_F16 = 17
uc.SPARC_REG_F17 = 18
uc.SPARC_REG_F18 = 19
uc.SPARC_REG_F19 = 20
uc.SPARC_REG_F20 = 21
uc.SPARC_REG_F21 = 22
uc.SPARC_REG_F22 = 23
uc.SPARC_REG_F23 = 24
uc.SPARC_REG_F24 = 25
uc.SPARC_REG_F25 = 26
uc.SPARC_REG_F26 = 27
uc.SPARC_REG_F27 = 28
uc.SPARC_REG_F28 = 29
uc.SPARC_REG_F29 = 30
uc.SPARC_REG_F30 = 31
uc.SPARC_REG_F31 = 32
uc.SPARC_REG_F32 = 33
uc.SPARC_REG_F34 = 34
uc.SPARC_REG_F36 = 35
uc.SPARC_REG_F38 = 36
uc.SPARC_REG_F40 = 37
uc.SPARC_REG_F42 = 38
uc.SPARC_REG_F44 = 39
uc.SPARC_REG_F46 = 40
uc.SPARC_REG_F48 = 41
uc.SPARC_REG_F50 = 42
uc.SPARC_REG_F52 = 43
uc.SPARC_REG_F54 = 44
uc.SPARC_REG_F56 = 45
uc.SPARC_REG_F58 = 46
uc.SPARC_REG_F60 = 47
uc.SPARC_REG_F62 = 48
uc.SPARC_REG_FCC0 = 49
uc.SPARC_REG_FCC1 = 50
uc.SPARC_REG_FCC2 = 51
uc.SPARC_REG_FCC3 = 52
uc.SPARC_REG_G0 = 53
uc.SPARC_REG_G1 = 54
uc.SPARC_REG_G2 = 55
uc.SPARC_REG_G3 = 56
uc.SPARC_REG_G4 = 57
uc.SPARC_REG_G5 = 58
uc.SPARC_REG_G6 = 59
uc.SPARC_REG_G7 = 60
uc.SPARC_REG_I0 = 61
uc.SPARC_REG_I1 = 62
uc.SPARC_REG_I2 = 63
uc.SPARC_REG_I3 = 64
uc.SPARC_REG_I4 = 65
uc.SPARC_REG_I5 = 66
uc.SPARC_REG_FP = 67
uc.SPARC_REG_I7 = 68
uc.SPARC_REG_ICC = 69
uc.SPARC_REG_L0 = 70
uc.SPARC_REG_L1 = 71
uc.SPARC_REG_L2 = 72
uc.SPARC_REG_L3 = 73
uc.SPARC_REG_L4 = 74
uc.SPARC_REG_L5 = 75
uc.SPARC_REG_L6 = 76
uc.SPARC_REG_L7 = 77
uc.SPARC_REG_O0 = 78
uc.SPARC_REG_O1 = 79
uc.SPARC_REG_O2 = 80
uc.SPARC_REG_O3 = 81
uc.SPARC_REG_O4 = 82
uc.SPARC_REG_O5 = 83
uc.SPARC_REG_SP = 84
uc.SPARC_REG_O7 = 85
uc.SPARC_REG_Y = 86
uc.SPARC_REG_XCC = 87
uc.SPARC_REG_PC = 88
uc.SPARC_REG_ENDING = 89
uc.SPARC_REG_O6 = 84
uc.SPARC_REG_I6 = 67
// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [x86_const.py]

// X86 registers

uc.X86_REG_INVALID = 0
uc.X86_REG_AH = 1
uc.X86_REG_AL = 2
uc.X86_REG_AX = 3
uc.X86_REG_BH = 4
uc.X86_REG_BL = 5
uc.X86_REG_BP = 6
uc.X86_REG_BPL = 7
uc.X86_REG_BX = 8
uc.X86_REG_CH = 9
uc.X86_REG_CL = 10
uc.X86_REG_CS = 11
uc.X86_REG_CX = 12
uc.X86_REG_DH = 13
uc.X86_REG_DI = 14
uc.X86_REG_DIL = 15
uc.X86_REG_DL = 16
uc.X86_REG_DS = 17
uc.X86_REG_DX = 18
uc.X86_REG_EAX = 19
uc.X86_REG_EBP = 20
uc.X86_REG_EBX = 21
uc.X86_REG_ECX = 22
uc.X86_REG_EDI = 23
uc.X86_REG_EDX = 24
uc.X86_REG_EFLAGS = 25
uc.X86_REG_EIP = 26
uc.X86_REG_EIZ = 27
uc.X86_REG_ES = 28
uc.X86_REG_ESI = 29
uc.X86_REG_ESP = 30
uc.X86_REG_FPSW = 31
uc.X86_REG_FS = 32
uc.X86_REG_GS = 33
uc.X86_REG_IP = 34
uc.X86_REG_RAX = 35
uc.X86_REG_RBP = 36
uc.X86_REG_RBX = 37
uc.X86_REG_RCX = 38
uc.X86_REG_RDI = 39
uc.X86_REG_RDX = 40
uc.X86_REG_RIP = 41
uc.X86_REG_RIZ = 42
uc.X86_REG_RSI = 43
uc.X86_REG_RSP = 44
uc.X86_REG_SI = 45
uc.X86_REG_SIL = 46
uc.X86_REG_SP = 47
uc.X86_REG_SPL = 48
uc.X86_REG_SS = 49
uc.X86_REG_CR0 = 50
uc.X86_REG_CR1 = 51
uc.X86_REG_CR2 = 52
uc.X86_REG_CR3 = 53
uc.X86_REG_CR4 = 54
uc.X86_REG_CR5 = 55
uc.X86_REG_CR6 = 56
uc.X86_REG_CR7 = 57
uc.X86_REG_CR8 = 58
uc.X86_REG_CR9 = 59
uc.X86_REG_CR10 = 60
uc.X86_REG_CR11 = 61
uc.X86_REG_CR12 = 62
uc.X86_REG_CR13 = 63
uc.X86_REG_CR14 = 64
uc.X86_REG_CR15 = 65
uc.X86_REG_DR0 = 66
uc.X86_REG_DR1 = 67
uc.X86_REG_DR2 = 68
uc.X86_REG_DR3 = 69
uc.X86_REG_DR4 = 70
uc.X86_REG_DR5 = 71
uc.X86_REG_DR6 = 72
uc.X86_REG_DR7 = 73
uc.X86_REG_DR8 = 74
uc.X86_REG_DR9 = 75
uc.X86_REG_DR10 = 76
uc.X86_REG_DR11 = 77
uc.X86_REG_DR12 = 78
uc.X86_REG_DR13 = 79
uc.X86_REG_DR14 = 80
uc.X86_REG_DR15 = 81
uc.X86_REG_FP0 = 82
uc.X86_REG_FP1 = 83
uc.X86_REG_FP2 = 84
uc.X86_REG_FP3 = 85
uc.X86_REG_FP4 = 86
uc.X86_REG_FP5 = 87
uc.X86_REG_FP6 = 88
uc.X86_REG_FP7 = 89
uc.X86_REG_K0 = 90
uc.X86_REG_K1 = 91
uc.X86_REG_K2 = 92
uc.X86_REG_K3 = 93
uc.X86_REG_K4 = 94
uc.X86_REG_K5 = 95
uc.X86_REG_K6 = 96
uc.X86_REG_K7 = 97
uc.X86_REG_MM0 = 98
uc.X86_REG_MM1 = 99
uc.X86_REG_MM2 = 100
uc.X86_REG_MM3 = 101
uc.X86_REG_MM4 = 102
uc.X86_REG_MM5 = 103
uc.X86_REG_MM6 = 104
uc.X86_REG_MM7 = 105
uc.X86_REG_R8 = 106
uc.X86_REG_R9 = 107
uc.X86_REG_R10 = 108
uc.X86_REG_R11 = 109
uc.X86_REG_R12 = 110
uc.X86_REG_R13 = 111
uc.X86_REG_R14 = 112
uc.X86_REG_R15 = 113
uc.X86_REG_ST0 = 114
uc.X86_REG_ST1 = 115
uc.X86_REG_ST2 = 116
uc.X86_REG_ST3 = 117
uc.X86_REG_ST4 = 118
uc.X86_REG_ST5 = 119
uc.X86_REG_ST6 = 120
uc.X86_REG_ST7 = 121
uc.X86_REG_XMM0 = 122
uc.X86_REG_XMM1 = 123
uc.X86_REG_XMM2 = 124
uc.X86_REG_XMM3 = 125
uc.X86_REG_XMM4 = 126
uc.X86_REG_XMM5 = 127
uc.X86_REG_XMM6 = 128
uc.X86_REG_XMM7 = 129
uc.X86_REG_XMM8 = 130
uc.X86_REG_XMM9 = 131
uc.X86_REG_XMM10 = 132
uc.X86_REG_XMM11 = 133
uc.X86_REG_XMM12 = 134
uc.X86_REG_XMM13 = 135
uc.X86_REG_XMM14 = 136
uc.X86_REG_XMM15 = 137
uc.X86_REG_XMM16 = 138
uc.X86_REG_XMM17 = 139
uc.X86_REG_XMM18 = 140
uc.X86_REG_XMM19 = 141
uc.X86_REG_XMM20 = 142
uc.X86_REG_XMM21 = 143
uc.X86_REG_XMM22 = 144
uc.X86_REG_XMM23 = 145
uc.X86_REG_XMM24 = 146
uc.X86_REG_XMM25 = 147
uc.X86_REG_XMM26 = 148
uc.X86_REG_XMM27 = 149
uc.X86_REG_XMM28 = 150
uc.X86_REG_XMM29 = 151
uc.X86_REG_XMM30 = 152
uc.X86_REG_XMM31 = 153
uc.X86_REG_YMM0 = 154
uc.X86_REG_YMM1 = 155
uc.X86_REG_YMM2 = 156
uc.X86_REG_YMM3 = 157
uc.X86_REG_YMM4 = 158
uc.X86_REG_YMM5 = 159
uc.X86_REG_YMM6 = 160
uc.X86_REG_YMM7 = 161
uc.X86_REG_YMM8 = 162
uc.X86_REG_YMM9 = 163
uc.X86_REG_YMM10 = 164
uc.X86_REG_YMM11 = 165
uc.X86_REG_YMM12 = 166
uc.X86_REG_YMM13 = 167
uc.X86_REG_YMM14 = 168
uc.X86_REG_YMM15 = 169
uc.X86_REG_YMM16 = 170
uc.X86_REG_YMM17 = 171
uc.X86_REG_YMM18 = 172
uc.X86_REG_YMM19 = 173
uc.X86_REG_YMM20 = 174
uc.X86_REG_YMM21 = 175
uc.X86_REG_YMM22 = 176
uc.X86_REG_YMM23 = 177
uc.X86_REG_YMM24 = 178
uc.X86_REG_YMM25 = 179
uc.X86_REG_YMM26 = 180
uc.X86_REG_YMM27 = 181
uc.X86_REG_YMM28 = 182
uc.X86_REG_YMM29 = 183
uc.X86_REG_YMM30 = 184
uc.X86_REG_YMM31 = 185
uc.X86_REG_ZMM0 = 186
uc.X86_REG_ZMM1 = 187
uc.X86_REG_ZMM2 = 188
uc.X86_REG_ZMM3 = 189
uc.X86_REG_ZMM4 = 190
uc.X86_REG_ZMM5 = 191
uc.X86_REG_ZMM6 = 192
uc.X86_REG_ZMM7 = 193
uc.X86_REG_ZMM8 = 194
uc.X86_REG_ZMM9 = 195
uc.X86_REG_ZMM10 = 196
uc.X86_REG_ZMM11 = 197
uc.X86_REG_ZMM12 = 198
uc.X86_REG_ZMM13 = 199
uc.X86_REG_ZMM14 = 200
uc.X86_REG_ZMM15 = 201
uc.X86_REG_ZMM16 = 202
uc.X86_REG_ZMM17 = 203
uc.X86_REG_ZMM18 = 204
uc.X86_REG_ZMM19 = 205
uc.X86_REG_ZMM20 = 206
uc.X86_REG_ZMM21 = 207
uc.X86_REG_ZMM22 = 208
uc.X86_REG_ZMM23 = 209
uc.X86_REG_ZMM24 = 210
uc.X86_REG_ZMM25 = 211
uc.X86_REG_ZMM26 = 212
uc.X86_REG_ZMM27 = 213
uc.X86_REG_ZMM28 = 214
uc.X86_REG_ZMM29 = 215
uc.X86_REG_ZMM30 = 216
uc.X86_REG_ZMM31 = 217
uc.X86_REG_R8B = 218
uc.X86_REG_R9B = 219
uc.X86_REG_R10B = 220
uc.X86_REG_R11B = 221
uc.X86_REG_R12B = 222
uc.X86_REG_R13B = 223
uc.X86_REG_R14B = 224
uc.X86_REG_R15B = 225
uc.X86_REG_R8D = 226
uc.X86_REG_R9D = 227
uc.X86_REG_R10D = 228
uc.X86_REG_R11D = 229
uc.X86_REG_R12D = 230
uc.X86_REG_R13D = 231
uc.X86_REG_R14D = 232
uc.X86_REG_R15D = 233
uc.X86_REG_R8W = 234
uc.X86_REG_R9W = 235
uc.X86_REG_R10W = 236
uc.X86_REG_R11W = 237
uc.X86_REG_R12W = 238
uc.X86_REG_R13W = 239
uc.X86_REG_R14W = 240
uc.X86_REG_R15W = 241
uc.X86_REG_IDTR = 242
uc.X86_REG_GDTR = 243
uc.X86_REG_LDTR = 244
uc.X86_REG_TR = 245
uc.X86_REG_FPCW = 246
uc.X86_REG_FPTAG = 247
uc.X86_REG_MSR = 248
uc.X86_REG_ENDING = 249

// X86 instructions

uc.X86_INS_INVALID = 0
uc.X86_INS_AAA = 1
uc.X86_INS_AAD = 2
uc.X86_INS_AAM = 3
uc.X86_INS_AAS = 4
uc.X86_INS_FABS = 5
uc.X86_INS_ADC = 6
uc.X86_INS_ADCX = 7
uc.X86_INS_ADD = 8
uc.X86_INS_ADDPD = 9
uc.X86_INS_ADDPS = 10
uc.X86_INS_ADDSD = 11
uc.X86_INS_ADDSS = 12
uc.X86_INS_ADDSUBPD = 13
uc.X86_INS_ADDSUBPS = 14
uc.X86_INS_FADD = 15
uc.X86_INS_FIADD = 16
uc.X86_INS_FADDP = 17
uc.X86_INS_ADOX = 18
uc.X86_INS_AESDECLAST = 19
uc.X86_INS_AESDEC = 20
uc.X86_INS_AESENCLAST = 21
uc.X86_INS_AESENC = 22
uc.X86_INS_AESIMC = 23
uc.X86_INS_AESKEYGENASSIST = 24
uc.X86_INS_AND = 25
uc.X86_INS_ANDN = 26
uc.X86_INS_ANDNPD = 27
uc.X86_INS_ANDNPS = 28
uc.X86_INS_ANDPD = 29
uc.X86_INS_ANDPS = 30
uc.X86_INS_ARPL = 31
uc.X86_INS_BEXTR = 32
uc.X86_INS_BLCFILL = 33
uc.X86_INS_BLCI = 34
uc.X86_INS_BLCIC = 35
uc.X86_INS_BLCMSK = 36
uc.X86_INS_BLCS = 37
uc.X86_INS_BLENDPD = 38
uc.X86_INS_BLENDPS = 39
uc.X86_INS_BLENDVPD = 40
uc.X86_INS_BLENDVPS = 41
uc.X86_INS_BLSFILL = 42
uc.X86_INS_BLSI = 43
uc.X86_INS_BLSIC = 44
uc.X86_INS_BLSMSK = 45
uc.X86_INS_BLSR = 46
uc.X86_INS_BOUND = 47
uc.X86_INS_BSF = 48
uc.X86_INS_BSR = 49
uc.X86_INS_BSWAP = 50
uc.X86_INS_BT = 51
uc.X86_INS_BTC = 52
uc.X86_INS_BTR = 53
uc.X86_INS_BTS = 54
uc.X86_INS_BZHI = 55
uc.X86_INS_CALL = 56
uc.X86_INS_CBW = 57
uc.X86_INS_CDQ = 58
uc.X86_INS_CDQE = 59
uc.X86_INS_FCHS = 60
uc.X86_INS_CLAC = 61
uc.X86_INS_CLC = 62
uc.X86_INS_CLD = 63
uc.X86_INS_CLFLUSH = 64
uc.X86_INS_CLFLUSHOPT = 65
uc.X86_INS_CLGI = 66
uc.X86_INS_CLI = 67
uc.X86_INS_CLTS = 68
uc.X86_INS_CLWB = 69
uc.X86_INS_CMC = 70
uc.X86_INS_CMOVA = 71
uc.X86_INS_CMOVAE = 72
uc.X86_INS_CMOVB = 73
uc.X86_INS_CMOVBE = 74
uc.X86_INS_FCMOVBE = 75
uc.X86_INS_FCMOVB = 76
uc.X86_INS_CMOVE = 77
uc.X86_INS_FCMOVE = 78
uc.X86_INS_CMOVG = 79
uc.X86_INS_CMOVGE = 80
uc.X86_INS_CMOVL = 81
uc.X86_INS_CMOVLE = 82
uc.X86_INS_FCMOVNBE = 83
uc.X86_INS_FCMOVNB = 84
uc.X86_INS_CMOVNE = 85
uc.X86_INS_FCMOVNE = 86
uc.X86_INS_CMOVNO = 87
uc.X86_INS_CMOVNP = 88
uc.X86_INS_FCMOVNU = 89
uc.X86_INS_CMOVNS = 90
uc.X86_INS_CMOVO = 91
uc.X86_INS_CMOVP = 92
uc.X86_INS_FCMOVU = 93
uc.X86_INS_CMOVS = 94
uc.X86_INS_CMP = 95
uc.X86_INS_CMPPD = 96
uc.X86_INS_CMPPS = 97
uc.X86_INS_CMPSB = 98
uc.X86_INS_CMPSD = 99
uc.X86_INS_CMPSQ = 100
uc.X86_INS_CMPSS = 101
uc.X86_INS_CMPSW = 102
uc.X86_INS_CMPXCHG16B = 103
uc.X86_INS_CMPXCHG = 104
uc.X86_INS_CMPXCHG8B = 105
uc.X86_INS_COMISD = 106
uc.X86_INS_COMISS = 107
uc.X86_INS_FCOMP = 108
uc.X86_INS_FCOMPI = 109
uc.X86_INS_FCOMI = 110
uc.X86_INS_FCOM = 111
uc.X86_INS_FCOS = 112
uc.X86_INS_CPUID = 113
uc.X86_INS_CQO = 114
uc.X86_INS_CRC32 = 115
uc.X86_INS_CVTDQ2PD = 116
uc.X86_INS_CVTDQ2PS = 117
uc.X86_INS_CVTPD2DQ = 118
uc.X86_INS_CVTPD2PS = 119
uc.X86_INS_CVTPS2DQ = 120
uc.X86_INS_CVTPS2PD = 121
uc.X86_INS_CVTSD2SI = 122
uc.X86_INS_CVTSD2SS = 123
uc.X86_INS_CVTSI2SD = 124
uc.X86_INS_CVTSI2SS = 125
uc.X86_INS_CVTSS2SD = 126
uc.X86_INS_CVTSS2SI = 127
uc.X86_INS_CVTTPD2DQ = 128
uc.X86_INS_CVTTPS2DQ = 129
uc.X86_INS_CVTTSD2SI = 130
uc.X86_INS_CVTTSS2SI = 131
uc.X86_INS_CWD = 132
uc.X86_INS_CWDE = 133
uc.X86_INS_DAA = 134
uc.X86_INS_DAS = 135
uc.X86_INS_DATA16 = 136
uc.X86_INS_DEC = 137
uc.X86_INS_DIV = 138
uc.X86_INS_DIVPD = 139
uc.X86_INS_DIVPS = 140
uc.X86_INS_FDIVR = 141
uc.X86_INS_FIDIVR = 142
uc.X86_INS_FDIVRP = 143
uc.X86_INS_DIVSD = 144
uc.X86_INS_DIVSS = 145
uc.X86_INS_FDIV = 146
uc.X86_INS_FIDIV = 147
uc.X86_INS_FDIVP = 148
uc.X86_INS_DPPD = 149
uc.X86_INS_DPPS = 150
uc.X86_INS_RET = 151
uc.X86_INS_ENCLS = 152
uc.X86_INS_ENCLU = 153
uc.X86_INS_ENTER = 154
uc.X86_INS_EXTRACTPS = 155
uc.X86_INS_EXTRQ = 156
uc.X86_INS_F2XM1 = 157
uc.X86_INS_LCALL = 158
uc.X86_INS_LJMP = 159
uc.X86_INS_FBLD = 160
uc.X86_INS_FBSTP = 161
uc.X86_INS_FCOMPP = 162
uc.X86_INS_FDECSTP = 163
uc.X86_INS_FEMMS = 164
uc.X86_INS_FFREE = 165
uc.X86_INS_FICOM = 166
uc.X86_INS_FICOMP = 167
uc.X86_INS_FINCSTP = 168
uc.X86_INS_FLDCW = 169
uc.X86_INS_FLDENV = 170
uc.X86_INS_FLDL2E = 171
uc.X86_INS_FLDL2T = 172
uc.X86_INS_FLDLG2 = 173
uc.X86_INS_FLDLN2 = 174
uc.X86_INS_FLDPI = 175
uc.X86_INS_FNCLEX = 176
uc.X86_INS_FNINIT = 177
uc.X86_INS_FNOP = 178
uc.X86_INS_FNSTCW = 179
uc.X86_INS_FNSTSW = 180
uc.X86_INS_FPATAN = 181
uc.X86_INS_FPREM = 182
uc.X86_INS_FPREM1 = 183
uc.X86_INS_FPTAN = 184
uc.X86_INS_FFREEP = 185
uc.X86_INS_FRNDINT = 186
uc.X86_INS_FRSTOR = 187
uc.X86_INS_FNSAVE = 188
uc.X86_INS_FSCALE = 189
uc.X86_INS_FSETPM = 190
uc.X86_INS_FSINCOS = 191
uc.X86_INS_FNSTENV = 192
uc.X86_INS_FXAM = 193
uc.X86_INS_FXRSTOR = 194
uc.X86_INS_FXRSTOR64 = 195
uc.X86_INS_FXSAVE = 196
uc.X86_INS_FXSAVE64 = 197
uc.X86_INS_FXTRACT = 198
uc.X86_INS_FYL2X = 199
uc.X86_INS_FYL2XP1 = 200
uc.X86_INS_MOVAPD = 201
uc.X86_INS_MOVAPS = 202
uc.X86_INS_ORPD = 203
uc.X86_INS_ORPS = 204
uc.X86_INS_VMOVAPD = 205
uc.X86_INS_VMOVAPS = 206
uc.X86_INS_XORPD = 207
uc.X86_INS_XORPS = 208
uc.X86_INS_GETSEC = 209
uc.X86_INS_HADDPD = 210
uc.X86_INS_HADDPS = 211
uc.X86_INS_HLT = 212
uc.X86_INS_HSUBPD = 213
uc.X86_INS_HSUBPS = 214
uc.X86_INS_IDIV = 215
uc.X86_INS_FILD = 216
uc.X86_INS_IMUL = 217
uc.X86_INS_IN = 218
uc.X86_INS_INC = 219
uc.X86_INS_INSB = 220
uc.X86_INS_INSERTPS = 221
uc.X86_INS_INSERTQ = 222
uc.X86_INS_INSD = 223
uc.X86_INS_INSW = 224
uc.X86_INS_INT = 225
uc.X86_INS_INT1 = 226
uc.X86_INS_INT3 = 227
uc.X86_INS_INTO = 228
uc.X86_INS_INVD = 229
uc.X86_INS_INVEPT = 230
uc.X86_INS_INVLPG = 231
uc.X86_INS_INVLPGA = 232
uc.X86_INS_INVPCID = 233
uc.X86_INS_INVVPID = 234
uc.X86_INS_IRET = 235
uc.X86_INS_IRETD = 236
uc.X86_INS_IRETQ = 237
uc.X86_INS_FISTTP = 238
uc.X86_INS_FIST = 239
uc.X86_INS_FISTP = 240
uc.X86_INS_UCOMISD = 241
uc.X86_INS_UCOMISS = 242
uc.X86_INS_VCOMISD = 243
uc.X86_INS_VCOMISS = 244
uc.X86_INS_VCVTSD2SS = 245
uc.X86_INS_VCVTSI2SD = 246
uc.X86_INS_VCVTSI2SS = 247
uc.X86_INS_VCVTSS2SD = 248
uc.X86_INS_VCVTTSD2SI = 249
uc.X86_INS_VCVTTSD2USI = 250
uc.X86_INS_VCVTTSS2SI = 251
uc.X86_INS_VCVTTSS2USI = 252
uc.X86_INS_VCVTUSI2SD = 253
uc.X86_INS_VCVTUSI2SS = 254
uc.X86_INS_VUCOMISD = 255
uc.X86_INS_VUCOMISS = 256
uc.X86_INS_JAE = 257
uc.X86_INS_JA = 258
uc.X86_INS_JBE = 259
uc.X86_INS_JB = 260
uc.X86_INS_JCXZ = 261
uc.X86_INS_JECXZ = 262
uc.X86_INS_JE = 263
uc.X86_INS_JGE = 264
uc.X86_INS_JG = 265
uc.X86_INS_JLE = 266
uc.X86_INS_JL = 267
uc.X86_INS_JMP = 268
uc.X86_INS_JNE = 269
uc.X86_INS_JNO = 270
uc.X86_INS_JNP = 271
uc.X86_INS_JNS = 272
uc.X86_INS_JO = 273
uc.X86_INS_JP = 274
uc.X86_INS_JRCXZ = 275
uc.X86_INS_JS = 276
uc.X86_INS_KANDB = 277
uc.X86_INS_KANDD = 278
uc.X86_INS_KANDNB = 279
uc.X86_INS_KANDND = 280
uc.X86_INS_KANDNQ = 281
uc.X86_INS_KANDNW = 282
uc.X86_INS_KANDQ = 283
uc.X86_INS_KANDW = 284
uc.X86_INS_KMOVB = 285
uc.X86_INS_KMOVD = 286
uc.X86_INS_KMOVQ = 287
uc.X86_INS_KMOVW = 288
uc.X86_INS_KNOTB = 289
uc.X86_INS_KNOTD = 290
uc.X86_INS_KNOTQ = 291
uc.X86_INS_KNOTW = 292
uc.X86_INS_KORB = 293
uc.X86_INS_KORD = 294
uc.X86_INS_KORQ = 295
uc.X86_INS_KORTESTB = 296
uc.X86_INS_KORTESTD = 297
uc.X86_INS_KORTESTQ = 298
uc.X86_INS_KORTESTW = 299
uc.X86_INS_KORW = 300
uc.X86_INS_KSHIFTLB = 301
uc.X86_INS_KSHIFTLD = 302
uc.X86_INS_KSHIFTLQ = 303
uc.X86_INS_KSHIFTLW = 304
uc.X86_INS_KSHIFTRB = 305
uc.X86_INS_KSHIFTRD = 306
uc.X86_INS_KSHIFTRQ = 307
uc.X86_INS_KSHIFTRW = 308
uc.X86_INS_KUNPCKBW = 309
uc.X86_INS_KXNORB = 310
uc.X86_INS_KXNORD = 311
uc.X86_INS_KXNORQ = 312
uc.X86_INS_KXNORW = 313
uc.X86_INS_KXORB = 314
uc.X86_INS_KXORD = 315
uc.X86_INS_KXORQ = 316
uc.X86_INS_KXORW = 317
uc.X86_INS_LAHF = 318
uc.X86_INS_LAR = 319
uc.X86_INS_LDDQU = 320
uc.X86_INS_LDMXCSR = 321
uc.X86_INS_LDS = 322
uc.X86_INS_FLDZ = 323
uc.X86_INS_FLD1 = 324
uc.X86_INS_FLD = 325
uc.X86_INS_LEA = 326
uc.X86_INS_LEAVE = 327
uc.X86_INS_LES = 328
uc.X86_INS_LFENCE = 329
uc.X86_INS_LFS = 330
uc.X86_INS_LGDT = 331
uc.X86_INS_LGS = 332
uc.X86_INS_LIDT = 333
uc.X86_INS_LLDT = 334
uc.X86_INS_LMSW = 335
uc.X86_INS_OR = 336
uc.X86_INS_SUB = 337
uc.X86_INS_XOR = 338
uc.X86_INS_LODSB = 339
uc.X86_INS_LODSD = 340
uc.X86_INS_LODSQ = 341
uc.X86_INS_LODSW = 342
uc.X86_INS_LOOP = 343
uc.X86_INS_LOOPE = 344
uc.X86_INS_LOOPNE = 345
uc.X86_INS_RETF = 346
uc.X86_INS_RETFQ = 347
uc.X86_INS_LSL = 348
uc.X86_INS_LSS = 349
uc.X86_INS_LTR = 350
uc.X86_INS_XADD = 351
uc.X86_INS_LZCNT = 352
uc.X86_INS_MASKMOVDQU = 353
uc.X86_INS_MAXPD = 354
uc.X86_INS_MAXPS = 355
uc.X86_INS_MAXSD = 356
uc.X86_INS_MAXSS = 357
uc.X86_INS_MFENCE = 358
uc.X86_INS_MINPD = 359
uc.X86_INS_MINPS = 360
uc.X86_INS_MINSD = 361
uc.X86_INS_MINSS = 362
uc.X86_INS_CVTPD2PI = 363
uc.X86_INS_CVTPI2PD = 364
uc.X86_INS_CVTPI2PS = 365
uc.X86_INS_CVTPS2PI = 366
uc.X86_INS_CVTTPD2PI = 367
uc.X86_INS_CVTTPS2PI = 368
uc.X86_INS_EMMS = 369
uc.X86_INS_MASKMOVQ = 370
uc.X86_INS_MOVD = 371
uc.X86_INS_MOVDQ2Q = 372
uc.X86_INS_MOVNTQ = 373
uc.X86_INS_MOVQ2DQ = 374
uc.X86_INS_MOVQ = 375
uc.X86_INS_PABSB = 376
uc.X86_INS_PABSD = 377
uc.X86_INS_PABSW = 378
uc.X86_INS_PACKSSDW = 379
uc.X86_INS_PACKSSWB = 380
uc.X86_INS_PACKUSWB = 381
uc.X86_INS_PADDB = 382
uc.X86_INS_PADDD = 383
uc.X86_INS_PADDQ = 384
uc.X86_INS_PADDSB = 385
uc.X86_INS_PADDSW = 386
uc.X86_INS_PADDUSB = 387
uc.X86_INS_PADDUSW = 388
uc.X86_INS_PADDW = 389
uc.X86_INS_PALIGNR = 390
uc.X86_INS_PANDN = 391
uc.X86_INS_PAND = 392
uc.X86_INS_PAVGB = 393
uc.X86_INS_PAVGW = 394
uc.X86_INS_PCMPEQB = 395
uc.X86_INS_PCMPEQD = 396
uc.X86_INS_PCMPEQW = 397
uc.X86_INS_PCMPGTB = 398
uc.X86_INS_PCMPGTD = 399
uc.X86_INS_PCMPGTW = 400
uc.X86_INS_PEXTRW = 401
uc.X86_INS_PHADDSW = 402
uc.X86_INS_PHADDW = 403
uc.X86_INS_PHADDD = 404
uc.X86_INS_PHSUBD = 405
uc.X86_INS_PHSUBSW = 406
uc.X86_INS_PHSUBW = 407
uc.X86_INS_PINSRW = 408
uc.X86_INS_PMADDUBSW = 409
uc.X86_INS_PMADDWD = 410
uc.X86_INS_PMAXSW = 411
uc.X86_INS_PMAXUB = 412
uc.X86_INS_PMINSW = 413
uc.X86_INS_PMINUB = 414
uc.X86_INS_PMOVMSKB = 415
uc.X86_INS_PMULHRSW = 416
uc.X86_INS_PMULHUW = 417
uc.X86_INS_PMULHW = 418
uc.X86_INS_PMULLW = 419
uc.X86_INS_PMULUDQ = 420
uc.X86_INS_POR = 421
uc.X86_INS_PSADBW = 422
uc.X86_INS_PSHUFB = 423
uc.X86_INS_PSHUFW = 424
uc.X86_INS_PSIGNB = 425
uc.X86_INS_PSIGND = 426
uc.X86_INS_PSIGNW = 427
uc.X86_INS_PSLLD = 428
uc.X86_INS_PSLLQ = 429
uc.X86_INS_PSLLW = 430
uc.X86_INS_PSRAD = 431
uc.X86_INS_PSRAW = 432
uc.X86_INS_PSRLD = 433
uc.X86_INS_PSRLQ = 434
uc.X86_INS_PSRLW = 435
uc.X86_INS_PSUBB = 436
uc.X86_INS_PSUBD = 437
uc.X86_INS_PSUBQ = 438
uc.X86_INS_PSUBSB = 439
uc.X86_INS_PSUBSW = 440
uc.X86_INS_PSUBUSB = 441
uc.X86_INS_PSUBUSW = 442
uc.X86_INS_PSUBW = 443
uc.X86_INS_PUNPCKHBW = 444
uc.X86_INS_PUNPCKHDQ = 445
uc.X86_INS_PUNPCKHWD = 446
uc.X86_INS_PUNPCKLBW = 447
uc.X86_INS_PUNPCKLDQ = 448
uc.X86_INS_PUNPCKLWD = 449
uc.X86_INS_PXOR = 450
uc.X86_INS_MONITOR = 451
uc.X86_INS_MONTMUL = 452
uc.X86_INS_MOV = 453
uc.X86_INS_MOVABS = 454
uc.X86_INS_MOVBE = 455
uc.X86_INS_MOVDDUP = 456
uc.X86_INS_MOVDQA = 457
uc.X86_INS_MOVDQU = 458
uc.X86_INS_MOVHLPS = 459
uc.X86_INS_MOVHPD = 460
uc.X86_INS_MOVHPS = 461
uc.X86_INS_MOVLHPS = 462
uc.X86_INS_MOVLPD = 463
uc.X86_INS_MOVLPS = 464
uc.X86_INS_MOVMSKPD = 465
uc.X86_INS_MOVMSKPS = 466
uc.X86_INS_MOVNTDQA = 467
uc.X86_INS_MOVNTDQ = 468
uc.X86_INS_MOVNTI = 469
uc.X86_INS_MOVNTPD = 470
uc.X86_INS_MOVNTPS = 471
uc.X86_INS_MOVNTSD = 472
uc.X86_INS_MOVNTSS = 473
uc.X86_INS_MOVSB = 474
uc.X86_INS_MOVSD = 475
uc.X86_INS_MOVSHDUP = 476
uc.X86_INS_MOVSLDUP = 477
uc.X86_INS_MOVSQ = 478
uc.X86_INS_MOVSS = 479
uc.X86_INS_MOVSW = 480
uc.X86_INS_MOVSX = 481
uc.X86_INS_MOVSXD = 482
uc.X86_INS_MOVUPD = 483
uc.X86_INS_MOVUPS = 484
uc.X86_INS_MOVZX = 485
uc.X86_INS_MPSADBW = 486
uc.X86_INS_MUL = 487
uc.X86_INS_MULPD = 488
uc.X86_INS_MULPS = 489
uc.X86_INS_MULSD = 490
uc.X86_INS_MULSS = 491
uc.X86_INS_MULX = 492
uc.X86_INS_FMUL = 493
uc.X86_INS_FIMUL = 494
uc.X86_INS_FMULP = 495
uc.X86_INS_MWAIT = 496
uc.X86_INS_NEG = 497
uc.X86_INS_NOP = 498
uc.X86_INS_NOT = 499
uc.X86_INS_OUT = 500
uc.X86_INS_OUTSB = 501
uc.X86_INS_OUTSD = 502
uc.X86_INS_OUTSW = 503
uc.X86_INS_PACKUSDW = 504
uc.X86_INS_PAUSE = 505
uc.X86_INS_PAVGUSB = 506
uc.X86_INS_PBLENDVB = 507
uc.X86_INS_PBLENDW = 508
uc.X86_INS_PCLMULQDQ = 509
uc.X86_INS_PCMPEQQ = 510
uc.X86_INS_PCMPESTRI = 511
uc.X86_INS_PCMPESTRM = 512
uc.X86_INS_PCMPGTQ = 513
uc.X86_INS_PCMPISTRI = 514
uc.X86_INS_PCMPISTRM = 515
uc.X86_INS_PCOMMIT = 516
uc.X86_INS_PDEP = 517
uc.X86_INS_PEXT = 518
uc.X86_INS_PEXTRB = 519
uc.X86_INS_PEXTRD = 520
uc.X86_INS_PEXTRQ = 521
uc.X86_INS_PF2ID = 522
uc.X86_INS_PF2IW = 523
uc.X86_INS_PFACC = 524
uc.X86_INS_PFADD = 525
uc.X86_INS_PFCMPEQ = 526
uc.X86_INS_PFCMPGE = 527
uc.X86_INS_PFCMPGT = 528
uc.X86_INS_PFMAX = 529
uc.X86_INS_PFMIN = 530
uc.X86_INS_PFMUL = 531
uc.X86_INS_PFNACC = 532
uc.X86_INS_PFPNACC = 533
uc.X86_INS_PFRCPIT1 = 534
uc.X86_INS_PFRCPIT2 = 535
uc.X86_INS_PFRCP = 536
uc.X86_INS_PFRSQIT1 = 537
uc.X86_INS_PFRSQRT = 538
uc.X86_INS_PFSUBR = 539
uc.X86_INS_PFSUB = 540
uc.X86_INS_PHMINPOSUW = 541
uc.X86_INS_PI2FD = 542
uc.X86_INS_PI2FW = 543
uc.X86_INS_PINSRB = 544
uc.X86_INS_PINSRD = 545
uc.X86_INS_PINSRQ = 546
uc.X86_INS_PMAXSB = 547
uc.X86_INS_PMAXSD = 548
uc.X86_INS_PMAXUD = 549
uc.X86_INS_PMAXUW = 550
uc.X86_INS_PMINSB = 551
uc.X86_INS_PMINSD = 552
uc.X86_INS_PMINUD = 553
uc.X86_INS_PMINUW = 554
uc.X86_INS_PMOVSXBD = 555
uc.X86_INS_PMOVSXBQ = 556
uc.X86_INS_PMOVSXBW = 557
uc.X86_INS_PMOVSXDQ = 558
uc.X86_INS_PMOVSXWD = 559
uc.X86_INS_PMOVSXWQ = 560
uc.X86_INS_PMOVZXBD = 561
uc.X86_INS_PMOVZXBQ = 562
uc.X86_INS_PMOVZXBW = 563
uc.X86_INS_PMOVZXDQ = 564
uc.X86_INS_PMOVZXWD = 565
uc.X86_INS_PMOVZXWQ = 566
uc.X86_INS_PMULDQ = 567
uc.X86_INS_PMULHRW = 568
uc.X86_INS_PMULLD = 569
uc.X86_INS_POP = 570
uc.X86_INS_POPAW = 571
uc.X86_INS_POPAL = 572
uc.X86_INS_POPCNT = 573
uc.X86_INS_POPF = 574
uc.X86_INS_POPFD = 575
uc.X86_INS_POPFQ = 576
uc.X86_INS_PREFETCH = 577
uc.X86_INS_PREFETCHNTA = 578
uc.X86_INS_PREFETCHT0 = 579
uc.X86_INS_PREFETCHT1 = 580
uc.X86_INS_PREFETCHT2 = 581
uc.X86_INS_PREFETCHW = 582
uc.X86_INS_PSHUFD = 583
uc.X86_INS_PSHUFHW = 584
uc.X86_INS_PSHUFLW = 585
uc.X86_INS_PSLLDQ = 586
uc.X86_INS_PSRLDQ = 587
uc.X86_INS_PSWAPD = 588
uc.X86_INS_PTEST = 589
uc.X86_INS_PUNPCKHQDQ = 590
uc.X86_INS_PUNPCKLQDQ = 591
uc.X86_INS_PUSH = 592
uc.X86_INS_PUSHAW = 593
uc.X86_INS_PUSHAL = 594
uc.X86_INS_PUSHF = 595
uc.X86_INS_PUSHFD = 596
uc.X86_INS_PUSHFQ = 597
uc.X86_INS_RCL = 598
uc.X86_INS_RCPPS = 599
uc.X86_INS_RCPSS = 600
uc.X86_INS_RCR = 601
uc.X86_INS_RDFSBASE = 602
uc.X86_INS_RDGSBASE = 603
uc.X86_INS_RDMSR = 604
uc.X86_INS_RDPMC = 605
uc.X86_INS_RDRAND = 606
uc.X86_INS_RDSEED = 607
uc.X86_INS_RDTSC = 608
uc.X86_INS_RDTSCP = 609
uc.X86_INS_ROL = 610
uc.X86_INS_ROR = 611
uc.X86_INS_RORX = 612
uc.X86_INS_ROUNDPD = 613
uc.X86_INS_ROUNDPS = 614
uc.X86_INS_ROUNDSD = 615
uc.X86_INS_ROUNDSS = 616
uc.X86_INS_RSM = 617
uc.X86_INS_RSQRTPS = 618
uc.X86_INS_RSQRTSS = 619
uc.X86_INS_SAHF = 620
uc.X86_INS_SAL = 621
uc.X86_INS_SALC = 622
uc.X86_INS_SAR = 623
uc.X86_INS_SARX = 624
uc.X86_INS_SBB = 625
uc.X86_INS_SCASB = 626
uc.X86_INS_SCASD = 627
uc.X86_INS_SCASQ = 628
uc.X86_INS_SCASW = 629
uc.X86_INS_SETAE = 630
uc.X86_INS_SETA = 631
uc.X86_INS_SETBE = 632
uc.X86_INS_SETB = 633
uc.X86_INS_SETE = 634
uc.X86_INS_SETGE = 635
uc.X86_INS_SETG = 636
uc.X86_INS_SETLE = 637
uc.X86_INS_SETL = 638
uc.X86_INS_SETNE = 639
uc.X86_INS_SETNO = 640
uc.X86_INS_SETNP = 641
uc.X86_INS_SETNS = 642
uc.X86_INS_SETO = 643
uc.X86_INS_SETP = 644
uc.X86_INS_SETS = 645
uc.X86_INS_SFENCE = 646
uc.X86_INS_SGDT = 647
uc.X86_INS_SHA1MSG1 = 648
uc.X86_INS_SHA1MSG2 = 649
uc.X86_INS_SHA1NEXTE = 650
uc.X86_INS_SHA1RNDS4 = 651
uc.X86_INS_SHA256MSG1 = 652
uc.X86_INS_SHA256MSG2 = 653
uc.X86_INS_SHA256RNDS2 = 654
uc.X86_INS_SHL = 655
uc.X86_INS_SHLD = 656
uc.X86_INS_SHLX = 657
uc.X86_INS_SHR = 658
uc.X86_INS_SHRD = 659
uc.X86_INS_SHRX = 660
uc.X86_INS_SHUFPD = 661
uc.X86_INS_SHUFPS = 662
uc.X86_INS_SIDT = 663
uc.X86_INS_FSIN = 664
uc.X86_INS_SKINIT = 665
uc.X86_INS_SLDT = 666
uc.X86_INS_SMSW = 667
uc.X86_INS_SQRTPD = 668
uc.X86_INS_SQRTPS = 669
uc.X86_INS_SQRTSD = 670
uc.X86_INS_SQRTSS = 671
uc.X86_INS_FSQRT = 672
uc.X86_INS_STAC = 673
uc.X86_INS_STC = 674
uc.X86_INS_STD = 675
uc.X86_INS_STGI = 676
uc.X86_INS_STI = 677
uc.X86_INS_STMXCSR = 678
uc.X86_INS_STOSB = 679
uc.X86_INS_STOSD = 680
uc.X86_INS_STOSQ = 681
uc.X86_INS_STOSW = 682
uc.X86_INS_STR = 683
uc.X86_INS_FST = 684
uc.X86_INS_FSTP = 685
uc.X86_INS_FSTPNCE = 686
uc.X86_INS_FXCH = 687
uc.X86_INS_SUBPD = 688
uc.X86_INS_SUBPS = 689
uc.X86_INS_FSUBR = 690
uc.X86_INS_FISUBR = 691
uc.X86_INS_FSUBRP = 692
uc.X86_INS_SUBSD = 693
uc.X86_INS_SUBSS = 694
uc.X86_INS_FSUB = 695
uc.X86_INS_FISUB = 696
uc.X86_INS_FSUBP = 697
uc.X86_INS_SWAPGS = 698
uc.X86_INS_SYSCALL = 699
uc.X86_INS_SYSENTER = 700
uc.X86_INS_SYSEXIT = 701
uc.X86_INS_SYSRET = 702
uc.X86_INS_T1MSKC = 703
uc.X86_INS_TEST = 704
uc.X86_INS_UD2 = 705
uc.X86_INS_FTST = 706
uc.X86_INS_TZCNT = 707
uc.X86_INS_TZMSK = 708
uc.X86_INS_FUCOMPI = 709
uc.X86_INS_FUCOMI = 710
uc.X86_INS_FUCOMPP = 711
uc.X86_INS_FUCOMP = 712
uc.X86_INS_FUCOM = 713
uc.X86_INS_UD2B = 714
uc.X86_INS_UNPCKHPD = 715
uc.X86_INS_UNPCKHPS = 716
uc.X86_INS_UNPCKLPD = 717
uc.X86_INS_UNPCKLPS = 718
uc.X86_INS_VADDPD = 719
uc.X86_INS_VADDPS = 720
uc.X86_INS_VADDSD = 721
uc.X86_INS_VADDSS = 722
uc.X86_INS_VADDSUBPD = 723
uc.X86_INS_VADDSUBPS = 724
uc.X86_INS_VAESDECLAST = 725
uc.X86_INS_VAESDEC = 726
uc.X86_INS_VAESENCLAST = 727
uc.X86_INS_VAESENC = 728
uc.X86_INS_VAESIMC = 729
uc.X86_INS_VAESKEYGENASSIST = 730
uc.X86_INS_VALIGND = 731
uc.X86_INS_VALIGNQ = 732
uc.X86_INS_VANDNPD = 733
uc.X86_INS_VANDNPS = 734
uc.X86_INS_VANDPD = 735
uc.X86_INS_VANDPS = 736
uc.X86_INS_VBLENDMPD = 737
uc.X86_INS_VBLENDMPS = 738
uc.X86_INS_VBLENDPD = 739
uc.X86_INS_VBLENDPS = 740
uc.X86_INS_VBLENDVPD = 741
uc.X86_INS_VBLENDVPS = 742
uc.X86_INS_VBROADCASTF128 = 743
uc.X86_INS_VBROADCASTI32X4 = 744
uc.X86_INS_VBROADCASTI64X4 = 745
uc.X86_INS_VBROADCASTSD = 746
uc.X86_INS_VBROADCASTSS = 747
uc.X86_INS_VCMPPD = 748
uc.X86_INS_VCMPPS = 749
uc.X86_INS_VCMPSD = 750
uc.X86_INS_VCMPSS = 751
uc.X86_INS_VCOMPRESSPD = 752
uc.X86_INS_VCOMPRESSPS = 753
uc.X86_INS_VCVTDQ2PD = 754
uc.X86_INS_VCVTDQ2PS = 755
uc.X86_INS_VCVTPD2DQX = 756
uc.X86_INS_VCVTPD2DQ = 757
uc.X86_INS_VCVTPD2PSX = 758
uc.X86_INS_VCVTPD2PS = 759
uc.X86_INS_VCVTPD2UDQ = 760
uc.X86_INS_VCVTPH2PS = 761
uc.X86_INS_VCVTPS2DQ = 762
uc.X86_INS_VCVTPS2PD = 763
uc.X86_INS_VCVTPS2PH = 764
uc.X86_INS_VCVTPS2UDQ = 765
uc.X86_INS_VCVTSD2SI = 766
uc.X86_INS_VCVTSD2USI = 767
uc.X86_INS_VCVTSS2SI = 768
uc.X86_INS_VCVTSS2USI = 769
uc.X86_INS_VCVTTPD2DQX = 770
uc.X86_INS_VCVTTPD2DQ = 771
uc.X86_INS_VCVTTPD2UDQ = 772
uc.X86_INS_VCVTTPS2DQ = 773
uc.X86_INS_VCVTTPS2UDQ = 774
uc.X86_INS_VCVTUDQ2PD = 775
uc.X86_INS_VCVTUDQ2PS = 776
uc.X86_INS_VDIVPD = 777
uc.X86_INS_VDIVPS = 778
uc.X86_INS_VDIVSD = 779
uc.X86_INS_VDIVSS = 780
uc.X86_INS_VDPPD = 781
uc.X86_INS_VDPPS = 782
uc.X86_INS_VERR = 783
uc.X86_INS_VERW = 784
uc.X86_INS_VEXP2PD = 785
uc.X86_INS_VEXP2PS = 786
uc.X86_INS_VEXPANDPD = 787
uc.X86_INS_VEXPANDPS = 788
uc.X86_INS_VEXTRACTF128 = 789
uc.X86_INS_VEXTRACTF32X4 = 790
uc.X86_INS_VEXTRACTF64X4 = 791
uc.X86_INS_VEXTRACTI128 = 792
uc.X86_INS_VEXTRACTI32X4 = 793
uc.X86_INS_VEXTRACTI64X4 = 794
uc.X86_INS_VEXTRACTPS = 795
uc.X86_INS_VFMADD132PD = 796
uc.X86_INS_VFMADD132PS = 797
uc.X86_INS_VFMADDPD = 798
uc.X86_INS_VFMADD213PD = 799
uc.X86_INS_VFMADD231PD = 800
uc.X86_INS_VFMADDPS = 801
uc.X86_INS_VFMADD213PS = 802
uc.X86_INS_VFMADD231PS = 803
uc.X86_INS_VFMADDSD = 804
uc.X86_INS_VFMADD213SD = 805
uc.X86_INS_VFMADD132SD = 806
uc.X86_INS_VFMADD231SD = 807
uc.X86_INS_VFMADDSS = 808
uc.X86_INS_VFMADD213SS = 809
uc.X86_INS_VFMADD132SS = 810
uc.X86_INS_VFMADD231SS = 811
uc.X86_INS_VFMADDSUB132PD = 812
uc.X86_INS_VFMADDSUB132PS = 813
uc.X86_INS_VFMADDSUBPD = 814
uc.X86_INS_VFMADDSUB213PD = 815
uc.X86_INS_VFMADDSUB231PD = 816
uc.X86_INS_VFMADDSUBPS = 817
uc.X86_INS_VFMADDSUB213PS = 818
uc.X86_INS_VFMADDSUB231PS = 819
uc.X86_INS_VFMSUB132PD = 820
uc.X86_INS_VFMSUB132PS = 821
uc.X86_INS_VFMSUBADD132PD = 822
uc.X86_INS_VFMSUBADD132PS = 823
uc.X86_INS_VFMSUBADDPD = 824
uc.X86_INS_VFMSUBADD213PD = 825
uc.X86_INS_VFMSUBADD231PD = 826
uc.X86_INS_VFMSUBADDPS = 827
uc.X86_INS_VFMSUBADD213PS = 828
uc.X86_INS_VFMSUBADD231PS = 829
uc.X86_INS_VFMSUBPD = 830
uc.X86_INS_VFMSUB213PD = 831
uc.X86_INS_VFMSUB231PD = 832
uc.X86_INS_VFMSUBPS = 833
uc.X86_INS_VFMSUB213PS = 834
uc.X86_INS_VFMSUB231PS = 835
uc.X86_INS_VFMSUBSD = 836
uc.X86_INS_VFMSUB213SD = 837
uc.X86_INS_VFMSUB132SD = 838
uc.X86_INS_VFMSUB231SD = 839
uc.X86_INS_VFMSUBSS = 840
uc.X86_INS_VFMSUB213SS = 841
uc.X86_INS_VFMSUB132SS = 842
uc.X86_INS_VFMSUB231SS = 843
uc.X86_INS_VFNMADD132PD = 844
uc.X86_INS_VFNMADD132PS = 845
uc.X86_INS_VFNMADDPD = 846
uc.X86_INS_VFNMADD213PD = 847
uc.X86_INS_VFNMADD231PD = 848
uc.X86_INS_VFNMADDPS = 849
uc.X86_INS_VFNMADD213PS = 850
uc.X86_INS_VFNMADD231PS = 851
uc.X86_INS_VFNMADDSD = 852
uc.X86_INS_VFNMADD213SD = 853
uc.X86_INS_VFNMADD132SD = 854
uc.X86_INS_VFNMADD231SD = 855
uc.X86_INS_VFNMADDSS = 856
uc.X86_INS_VFNMADD213SS = 857
uc.X86_INS_VFNMADD132SS = 858
uc.X86_INS_VFNMADD231SS = 859
uc.X86_INS_VFNMSUB132PD = 860
uc.X86_INS_VFNMSUB132PS = 861
uc.X86_INS_VFNMSUBPD = 862
uc.X86_INS_VFNMSUB213PD = 863
uc.X86_INS_VFNMSUB231PD = 864
uc.X86_INS_VFNMSUBPS = 865
uc.X86_INS_VFNMSUB213PS = 866
uc.X86_INS_VFNMSUB231PS = 867
uc.X86_INS_VFNMSUBSD = 868
uc.X86_INS_VFNMSUB213SD = 869
uc.X86_INS_VFNMSUB132SD = 870
uc.X86_INS_VFNMSUB231SD = 871
uc.X86_INS_VFNMSUBSS = 872
uc.X86_INS_VFNMSUB213SS = 873
uc.X86_INS_VFNMSUB132SS = 874
uc.X86_INS_VFNMSUB231SS = 875
uc.X86_INS_VFRCZPD = 876
uc.X86_INS_VFRCZPS = 877
uc.X86_INS_VFRCZSD = 878
uc.X86_INS_VFRCZSS = 879
uc.X86_INS_VORPD = 880
uc.X86_INS_VORPS = 881
uc.X86_INS_VXORPD = 882
uc.X86_INS_VXORPS = 883
uc.X86_INS_VGATHERDPD = 884
uc.X86_INS_VGATHERDPS = 885
uc.X86_INS_VGATHERPF0DPD = 886
uc.X86_INS_VGATHERPF0DPS = 887
uc.X86_INS_VGATHERPF0QPD = 888
uc.X86_INS_VGATHERPF0QPS = 889
uc.X86_INS_VGATHERPF1DPD = 890
uc.X86_INS_VGATHERPF1DPS = 891
uc.X86_INS_VGATHERPF1QPD = 892
uc.X86_INS_VGATHERPF1QPS = 893
uc.X86_INS_VGATHERQPD = 894
uc.X86_INS_VGATHERQPS = 895
uc.X86_INS_VHADDPD = 896
uc.X86_INS_VHADDPS = 897
uc.X86_INS_VHSUBPD = 898
uc.X86_INS_VHSUBPS = 899
uc.X86_INS_VINSERTF128 = 900
uc.X86_INS_VINSERTF32X4 = 901
uc.X86_INS_VINSERTF32X8 = 902
uc.X86_INS_VINSERTF64X2 = 903
uc.X86_INS_VINSERTF64X4 = 904
uc.X86_INS_VINSERTI128 = 905
uc.X86_INS_VINSERTI32X4 = 906
uc.X86_INS_VINSERTI32X8 = 907
uc.X86_INS_VINSERTI64X2 = 908
uc.X86_INS_VINSERTI64X4 = 909
uc.X86_INS_VINSERTPS = 910
uc.X86_INS_VLDDQU = 911
uc.X86_INS_VLDMXCSR = 912
uc.X86_INS_VMASKMOVDQU = 913
uc.X86_INS_VMASKMOVPD = 914
uc.X86_INS_VMASKMOVPS = 915
uc.X86_INS_VMAXPD = 916
uc.X86_INS_VMAXPS = 917
uc.X86_INS_VMAXSD = 918
uc.X86_INS_VMAXSS = 919
uc.X86_INS_VMCALL = 920
uc.X86_INS_VMCLEAR = 921
uc.X86_INS_VMFUNC = 922
uc.X86_INS_VMINPD = 923
uc.X86_INS_VMINPS = 924
uc.X86_INS_VMINSD = 925
uc.X86_INS_VMINSS = 926
uc.X86_INS_VMLAUNCH = 927
uc.X86_INS_VMLOAD = 928
uc.X86_INS_VMMCALL = 929
uc.X86_INS_VMOVQ = 930
uc.X86_INS_VMOVDDUP = 931
uc.X86_INS_VMOVD = 932
uc.X86_INS_VMOVDQA32 = 933
uc.X86_INS_VMOVDQA64 = 934
uc.X86_INS_VMOVDQA = 935
uc.X86_INS_VMOVDQU16 = 936
uc.X86_INS_VMOVDQU32 = 937
uc.X86_INS_VMOVDQU64 = 938
uc.X86_INS_VMOVDQU8 = 939
uc.X86_INS_VMOVDQU = 940
uc.X86_INS_VMOVHLPS = 941
uc.X86_INS_VMOVHPD = 942
uc.X86_INS_VMOVHPS = 943
uc.X86_INS_VMOVLHPS = 944
uc.X86_INS_VMOVLPD = 945
uc.X86_INS_VMOVLPS = 946
uc.X86_INS_VMOVMSKPD = 947
uc.X86_INS_VMOVMSKPS = 948
uc.X86_INS_VMOVNTDQA = 949
uc.X86_INS_VMOVNTDQ = 950
uc.X86_INS_VMOVNTPD = 951
uc.X86_INS_VMOVNTPS = 952
uc.X86_INS_VMOVSD = 953
uc.X86_INS_VMOVSHDUP = 954
uc.X86_INS_VMOVSLDUP = 955
uc.X86_INS_VMOVSS = 956
uc.X86_INS_VMOVUPD = 957
uc.X86_INS_VMOVUPS = 958
uc.X86_INS_VMPSADBW = 959
uc.X86_INS_VMPTRLD = 960
uc.X86_INS_VMPTRST = 961
uc.X86_INS_VMREAD = 962
uc.X86_INS_VMRESUME = 963
uc.X86_INS_VMRUN = 964
uc.X86_INS_VMSAVE = 965
uc.X86_INS_VMULPD = 966
uc.X86_INS_VMULPS = 967
uc.X86_INS_VMULSD = 968
uc.X86_INS_VMULSS = 969
uc.X86_INS_VMWRITE = 970
uc.X86_INS_VMXOFF = 971
uc.X86_INS_VMXON = 972
uc.X86_INS_VPABSB = 973
uc.X86_INS_VPABSD = 974
uc.X86_INS_VPABSQ = 975
uc.X86_INS_VPABSW = 976
uc.X86_INS_VPACKSSDW = 977
uc.X86_INS_VPACKSSWB = 978
uc.X86_INS_VPACKUSDW = 979
uc.X86_INS_VPACKUSWB = 980
uc.X86_INS_VPADDB = 981
uc.X86_INS_VPADDD = 982
uc.X86_INS_VPADDQ = 983
uc.X86_INS_VPADDSB = 984
uc.X86_INS_VPADDSW = 985
uc.X86_INS_VPADDUSB = 986
uc.X86_INS_VPADDUSW = 987
uc.X86_INS_VPADDW = 988
uc.X86_INS_VPALIGNR = 989
uc.X86_INS_VPANDD = 990
uc.X86_INS_VPANDND = 991
uc.X86_INS_VPANDNQ = 992
uc.X86_INS_VPANDN = 993
uc.X86_INS_VPANDQ = 994
uc.X86_INS_VPAND = 995
uc.X86_INS_VPAVGB = 996
uc.X86_INS_VPAVGW = 997
uc.X86_INS_VPBLENDD = 998
uc.X86_INS_VPBLENDMB = 999
uc.X86_INS_VPBLENDMD = 1000
uc.X86_INS_VPBLENDMQ = 1001
uc.X86_INS_VPBLENDMW = 1002
uc.X86_INS_VPBLENDVB = 1003
uc.X86_INS_VPBLENDW = 1004
uc.X86_INS_VPBROADCASTB = 1005
uc.X86_INS_VPBROADCASTD = 1006
uc.X86_INS_VPBROADCASTMB2Q = 1007
uc.X86_INS_VPBROADCASTMW2D = 1008
uc.X86_INS_VPBROADCASTQ = 1009
uc.X86_INS_VPBROADCASTW = 1010
uc.X86_INS_VPCLMULQDQ = 1011
uc.X86_INS_VPCMOV = 1012
uc.X86_INS_VPCMPB = 1013
uc.X86_INS_VPCMPD = 1014
uc.X86_INS_VPCMPEQB = 1015
uc.X86_INS_VPCMPEQD = 1016
uc.X86_INS_VPCMPEQQ = 1017
uc.X86_INS_VPCMPEQW = 1018
uc.X86_INS_VPCMPESTRI = 1019
uc.X86_INS_VPCMPESTRM = 1020
uc.X86_INS_VPCMPGTB = 1021
uc.X86_INS_VPCMPGTD = 1022
uc.X86_INS_VPCMPGTQ = 1023
uc.X86_INS_VPCMPGTW = 1024
uc.X86_INS_VPCMPISTRI = 1025
uc.X86_INS_VPCMPISTRM = 1026
uc.X86_INS_VPCMPQ = 1027
uc.X86_INS_VPCMPUB = 1028
uc.X86_INS_VPCMPUD = 1029
uc.X86_INS_VPCMPUQ = 1030
uc.X86_INS_VPCMPUW = 1031
uc.X86_INS_VPCMPW = 1032
uc.X86_INS_VPCOMB = 1033
uc.X86_INS_VPCOMD = 1034
uc.X86_INS_VPCOMPRESSD = 1035
uc.X86_INS_VPCOMPRESSQ = 1036
uc.X86_INS_VPCOMQ = 1037
uc.X86_INS_VPCOMUB = 1038
uc.X86_INS_VPCOMUD = 1039
uc.X86_INS_VPCOMUQ = 1040
uc.X86_INS_VPCOMUW = 1041
uc.X86_INS_VPCOMW = 1042
uc.X86_INS_VPCONFLICTD = 1043
uc.X86_INS_VPCONFLICTQ = 1044
uc.X86_INS_VPERM2F128 = 1045
uc.X86_INS_VPERM2I128 = 1046
uc.X86_INS_VPERMD = 1047
uc.X86_INS_VPERMI2D = 1048
uc.X86_INS_VPERMI2PD = 1049
uc.X86_INS_VPERMI2PS = 1050
uc.X86_INS_VPERMI2Q = 1051
uc.X86_INS_VPERMIL2PD = 1052
uc.X86_INS_VPERMIL2PS = 1053
uc.X86_INS_VPERMILPD = 1054
uc.X86_INS_VPERMILPS = 1055
uc.X86_INS_VPERMPD = 1056
uc.X86_INS_VPERMPS = 1057
uc.X86_INS_VPERMQ = 1058
uc.X86_INS_VPERMT2D = 1059
uc.X86_INS_VPERMT2PD = 1060
uc.X86_INS_VPERMT2PS = 1061
uc.X86_INS_VPERMT2Q = 1062
uc.X86_INS_VPEXPANDD = 1063
uc.X86_INS_VPEXPANDQ = 1064
uc.X86_INS_VPEXTRB = 1065
uc.X86_INS_VPEXTRD = 1066
uc.X86_INS_VPEXTRQ = 1067
uc.X86_INS_VPEXTRW = 1068
uc.X86_INS_VPGATHERDD = 1069
uc.X86_INS_VPGATHERDQ = 1070
uc.X86_INS_VPGATHERQD = 1071
uc.X86_INS_VPGATHERQQ = 1072
uc.X86_INS_VPHADDBD = 1073
uc.X86_INS_VPHADDBQ = 1074
uc.X86_INS_VPHADDBW = 1075
uc.X86_INS_VPHADDDQ = 1076
uc.X86_INS_VPHADDD = 1077
uc.X86_INS_VPHADDSW = 1078
uc.X86_INS_VPHADDUBD = 1079
uc.X86_INS_VPHADDUBQ = 1080
uc.X86_INS_VPHADDUBW = 1081
uc.X86_INS_VPHADDUDQ = 1082
uc.X86_INS_VPHADDUWD = 1083
uc.X86_INS_VPHADDUWQ = 1084
uc.X86_INS_VPHADDWD = 1085
uc.X86_INS_VPHADDWQ = 1086
uc.X86_INS_VPHADDW = 1087
uc.X86_INS_VPHMINPOSUW = 1088
uc.X86_INS_VPHSUBBW = 1089
uc.X86_INS_VPHSUBDQ = 1090
uc.X86_INS_VPHSUBD = 1091
uc.X86_INS_VPHSUBSW = 1092
uc.X86_INS_VPHSUBWD = 1093
uc.X86_INS_VPHSUBW = 1094
uc.X86_INS_VPINSRB = 1095
uc.X86_INS_VPINSRD = 1096
uc.X86_INS_VPINSRQ = 1097
uc.X86_INS_VPINSRW = 1098
uc.X86_INS_VPLZCNTD = 1099
uc.X86_INS_VPLZCNTQ = 1100
uc.X86_INS_VPMACSDD = 1101
uc.X86_INS_VPMACSDQH = 1102
uc.X86_INS_VPMACSDQL = 1103
uc.X86_INS_VPMACSSDD = 1104
uc.X86_INS_VPMACSSDQH = 1105
uc.X86_INS_VPMACSSDQL = 1106
uc.X86_INS_VPMACSSWD = 1107
uc.X86_INS_VPMACSSWW = 1108
uc.X86_INS_VPMACSWD = 1109
uc.X86_INS_VPMACSWW = 1110
uc.X86_INS_VPMADCSSWD = 1111
uc.X86_INS_VPMADCSWD = 1112
uc.X86_INS_VPMADDUBSW = 1113
uc.X86_INS_VPMADDWD = 1114
uc.X86_INS_VPMASKMOVD = 1115
uc.X86_INS_VPMASKMOVQ = 1116
uc.X86_INS_VPMAXSB = 1117
uc.X86_INS_VPMAXSD = 1118
uc.X86_INS_VPMAXSQ = 1119
uc.X86_INS_VPMAXSW = 1120
uc.X86_INS_VPMAXUB = 1121
uc.X86_INS_VPMAXUD = 1122
uc.X86_INS_VPMAXUQ = 1123
uc.X86_INS_VPMAXUW = 1124
uc.X86_INS_VPMINSB = 1125
uc.X86_INS_VPMINSD = 1126
uc.X86_INS_VPMINSQ = 1127
uc.X86_INS_VPMINSW = 1128
uc.X86_INS_VPMINUB = 1129
uc.X86_INS_VPMINUD = 1130
uc.X86_INS_VPMINUQ = 1131
uc.X86_INS_VPMINUW = 1132
uc.X86_INS_VPMOVDB = 1133
uc.X86_INS_VPMOVDW = 1134
uc.X86_INS_VPMOVM2B = 1135
uc.X86_INS_VPMOVM2D = 1136
uc.X86_INS_VPMOVM2Q = 1137
uc.X86_INS_VPMOVM2W = 1138
uc.X86_INS_VPMOVMSKB = 1139
uc.X86_INS_VPMOVQB = 1140
uc.X86_INS_VPMOVQD = 1141
uc.X86_INS_VPMOVQW = 1142
uc.X86_INS_VPMOVSDB = 1143
uc.X86_INS_VPMOVSDW = 1144
uc.X86_INS_VPMOVSQB = 1145
uc.X86_INS_VPMOVSQD = 1146
uc.X86_INS_VPMOVSQW = 1147
uc.X86_INS_VPMOVSXBD = 1148
uc.X86_INS_VPMOVSXBQ = 1149
uc.X86_INS_VPMOVSXBW = 1150
uc.X86_INS_VPMOVSXDQ = 1151
uc.X86_INS_VPMOVSXWD = 1152
uc.X86_INS_VPMOVSXWQ = 1153
uc.X86_INS_VPMOVUSDB = 1154
uc.X86_INS_VPMOVUSDW = 1155
uc.X86_INS_VPMOVUSQB = 1156
uc.X86_INS_VPMOVUSQD = 1157
uc.X86_INS_VPMOVUSQW = 1158
uc.X86_INS_VPMOVZXBD = 1159
uc.X86_INS_VPMOVZXBQ = 1160
uc.X86_INS_VPMOVZXBW = 1161
uc.X86_INS_VPMOVZXDQ = 1162
uc.X86_INS_VPMOVZXWD = 1163
uc.X86_INS_VPMOVZXWQ = 1164
uc.X86_INS_VPMULDQ = 1165
uc.X86_INS_VPMULHRSW = 1166
uc.X86_INS_VPMULHUW = 1167
uc.X86_INS_VPMULHW = 1168
uc.X86_INS_VPMULLD = 1169
uc.X86_INS_VPMULLQ = 1170
uc.X86_INS_VPMULLW = 1171
uc.X86_INS_VPMULUDQ = 1172
uc.X86_INS_VPORD = 1173
uc.X86_INS_VPORQ = 1174
uc.X86_INS_VPOR = 1175
uc.X86_INS_VPPERM = 1176
uc.X86_INS_VPROTB = 1177
uc.X86_INS_VPROTD = 1178
uc.X86_INS_VPROTQ = 1179
uc.X86_INS_VPROTW = 1180
uc.X86_INS_VPSADBW = 1181
uc.X86_INS_VPSCATTERDD = 1182
uc.X86_INS_VPSCATTERDQ = 1183
uc.X86_INS_VPSCATTERQD = 1184
uc.X86_INS_VPSCATTERQQ = 1185
uc.X86_INS_VPSHAB = 1186
uc.X86_INS_VPSHAD = 1187
uc.X86_INS_VPSHAQ = 1188
uc.X86_INS_VPSHAW = 1189
uc.X86_INS_VPSHLB = 1190
uc.X86_INS_VPSHLD = 1191
uc.X86_INS_VPSHLQ = 1192
uc.X86_INS_VPSHLW = 1193
uc.X86_INS_VPSHUFB = 1194
uc.X86_INS_VPSHUFD = 1195
uc.X86_INS_VPSHUFHW = 1196
uc.X86_INS_VPSHUFLW = 1197
uc.X86_INS_VPSIGNB = 1198
uc.X86_INS_VPSIGND = 1199
uc.X86_INS_VPSIGNW = 1200
uc.X86_INS_VPSLLDQ = 1201
uc.X86_INS_VPSLLD = 1202
uc.X86_INS_VPSLLQ = 1203
uc.X86_INS_VPSLLVD = 1204
uc.X86_INS_VPSLLVQ = 1205
uc.X86_INS_VPSLLW = 1206
uc.X86_INS_VPSRAD = 1207
uc.X86_INS_VPSRAQ = 1208
uc.X86_INS_VPSRAVD = 1209
uc.X86_INS_VPSRAVQ = 1210
uc.X86_INS_VPSRAW = 1211
uc.X86_INS_VPSRLDQ = 1212
uc.X86_INS_VPSRLD = 1213
uc.X86_INS_VPSRLQ = 1214
uc.X86_INS_VPSRLVD = 1215
uc.X86_INS_VPSRLVQ = 1216
uc.X86_INS_VPSRLW = 1217
uc.X86_INS_VPSUBB = 1218
uc.X86_INS_VPSUBD = 1219
uc.X86_INS_VPSUBQ = 1220
uc.X86_INS_VPSUBSB = 1221
uc.X86_INS_VPSUBSW = 1222
uc.X86_INS_VPSUBUSB = 1223
uc.X86_INS_VPSUBUSW = 1224
uc.X86_INS_VPSUBW = 1225
uc.X86_INS_VPTESTMD = 1226
uc.X86_INS_VPTESTMQ = 1227
uc.X86_INS_VPTESTNMD = 1228
uc.X86_INS_VPTESTNMQ = 1229
uc.X86_INS_VPTEST = 1230
uc.X86_INS_VPUNPCKHBW = 1231
uc.X86_INS_VPUNPCKHDQ = 1232
uc.X86_INS_VPUNPCKHQDQ = 1233
uc.X86_INS_VPUNPCKHWD = 1234
uc.X86_INS_VPUNPCKLBW = 1235
uc.X86_INS_VPUNPCKLDQ = 1236
uc.X86_INS_VPUNPCKLQDQ = 1237
uc.X86_INS_VPUNPCKLWD = 1238
uc.X86_INS_VPXORD = 1239
uc.X86_INS_VPXORQ = 1240
uc.X86_INS_VPXOR = 1241
uc.X86_INS_VRCP14PD = 1242
uc.X86_INS_VRCP14PS = 1243
uc.X86_INS_VRCP14SD = 1244
uc.X86_INS_VRCP14SS = 1245
uc.X86_INS_VRCP28PD = 1246
uc.X86_INS_VRCP28PS = 1247
uc.X86_INS_VRCP28SD = 1248
uc.X86_INS_VRCP28SS = 1249
uc.X86_INS_VRCPPS = 1250
uc.X86_INS_VRCPSS = 1251
uc.X86_INS_VRNDSCALEPD = 1252
uc.X86_INS_VRNDSCALEPS = 1253
uc.X86_INS_VRNDSCALESD = 1254
uc.X86_INS_VRNDSCALESS = 1255
uc.X86_INS_VROUNDPD = 1256
uc.X86_INS_VROUNDPS = 1257
uc.X86_INS_VROUNDSD = 1258
uc.X86_INS_VROUNDSS = 1259
uc.X86_INS_VRSQRT14PD = 1260
uc.X86_INS_VRSQRT14PS = 1261
uc.X86_INS_VRSQRT14SD = 1262
uc.X86_INS_VRSQRT14SS = 1263
uc.X86_INS_VRSQRT28PD = 1264
uc.X86_INS_VRSQRT28PS = 1265
uc.X86_INS_VRSQRT28SD = 1266
uc.X86_INS_VRSQRT28SS = 1267
uc.X86_INS_VRSQRTPS = 1268
uc.X86_INS_VRSQRTSS = 1269
uc.X86_INS_VSCATTERDPD = 1270
uc.X86_INS_VSCATTERDPS = 1271
uc.X86_INS_VSCATTERPF0DPD = 1272
uc.X86_INS_VSCATTERPF0DPS = 1273
uc.X86_INS_VSCATTERPF0QPD = 1274
uc.X86_INS_VSCATTERPF0QPS = 1275
uc.X86_INS_VSCATTERPF1DPD = 1276
uc.X86_INS_VSCATTERPF1DPS = 1277
uc.X86_INS_VSCATTERPF1QPD = 1278
uc.X86_INS_VSCATTERPF1QPS = 1279
uc.X86_INS_VSCATTERQPD = 1280
uc.X86_INS_VSCATTERQPS = 1281
uc.X86_INS_VSHUFPD = 1282
uc.X86_INS_VSHUFPS = 1283
uc.X86_INS_VSQRTPD = 1284
uc.X86_INS_VSQRTPS = 1285
uc.X86_INS_VSQRTSD = 1286
uc.X86_INS_VSQRTSS = 1287
uc.X86_INS_VSTMXCSR = 1288
uc.X86_INS_VSUBPD = 1289
uc.X86_INS_VSUBPS = 1290
uc.X86_INS_VSUBSD = 1291
uc.X86_INS_VSUBSS = 1292
uc.X86_INS_VTESTPD = 1293
uc.X86_INS_VTESTPS = 1294
uc.X86_INS_VUNPCKHPD = 1295
uc.X86_INS_VUNPCKHPS = 1296
uc.X86_INS_VUNPCKLPD = 1297
uc.X86_INS_VUNPCKLPS = 1298
uc.X86_INS_VZEROALL = 1299
uc.X86_INS_VZEROUPPER = 1300
uc.X86_INS_WAIT = 1301
uc.X86_INS_WBINVD = 1302
uc.X86_INS_WRFSBASE = 1303
uc.X86_INS_WRGSBASE = 1304
uc.X86_INS_WRMSR = 1305
uc.X86_INS_XABORT = 1306
uc.X86_INS_XACQUIRE = 1307
uc.X86_INS_XBEGIN = 1308
uc.X86_INS_XCHG = 1309
uc.X86_INS_XCRYPTCBC = 1310
uc.X86_INS_XCRYPTCFB = 1311
uc.X86_INS_XCRYPTCTR = 1312
uc.X86_INS_XCRYPTECB = 1313
uc.X86_INS_XCRYPTOFB = 1314
uc.X86_INS_XEND = 1315
uc.X86_INS_XGETBV = 1316
uc.X86_INS_XLATB = 1317
uc.X86_INS_XRELEASE = 1318
uc.X86_INS_XRSTOR = 1319
uc.X86_INS_XRSTOR64 = 1320
uc.X86_INS_XRSTORS = 1321
uc.X86_INS_XRSTORS64 = 1322
uc.X86_INS_XSAVE = 1323
uc.X86_INS_XSAVE64 = 1324
uc.X86_INS_XSAVEC = 1325
uc.X86_INS_XSAVEC64 = 1326
uc.X86_INS_XSAVEOPT = 1327
uc.X86_INS_XSAVEOPT64 = 1328
uc.X86_INS_XSAVES = 1329
uc.X86_INS_XSAVES64 = 1330
uc.X86_INS_XSETBV = 1331
uc.X86_INS_XSHA1 = 1332
uc.X86_INS_XSHA256 = 1333
uc.X86_INS_XSTORE = 1334
uc.X86_INS_XTEST = 1335
uc.X86_INS_FDISI8087_NOP = 1336
uc.X86_INS_FENI8087_NOP = 1337
uc.X86_INS_ENDING = 1338
// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [unicorn_const.py]
uc.API_MAJOR = 1

uc.API_MINOR = 0
uc.VERSION_MAJOR = 1

uc.VERSION_MINOR = 0
uc.VERSION_EXTRA = 1
uc.SECOND_SCALE = 1000000
uc.MILISECOND_SCALE = 1000
uc.ARCH_ARM = 1
uc.ARCH_ARM64 = 2
uc.ARCH_MIPS = 3
uc.ARCH_X86 = 4
uc.ARCH_PPC = 5
uc.ARCH_SPARC = 6
uc.ARCH_M68K = 7
uc.ARCH_MAX = 8

uc.MODE_LITTLE_ENDIAN = 0
uc.MODE_BIG_ENDIAN = 1073741824

uc.MODE_ARM = 0
uc.MODE_THUMB = 16
uc.MODE_MCLASS = 32
uc.MODE_V8 = 64
uc.MODE_MICRO = 16
uc.MODE_MIPS3 = 32
uc.MODE_MIPS32R6 = 64
uc.MODE_MIPS32 = 4
uc.MODE_MIPS64 = 8
uc.MODE_16 = 2
uc.MODE_32 = 4
uc.MODE_64 = 8
uc.MODE_PPC32 = 4
uc.MODE_PPC64 = 8
uc.MODE_QPX = 16
uc.MODE_SPARC32 = 4
uc.MODE_SPARC64 = 8
uc.MODE_V9 = 16

uc.ERR_OK = 0
uc.ERR_NOMEM = 1
uc.ERR_ARCH = 2
uc.ERR_HANDLE = 3
uc.ERR_MODE = 4
uc.ERR_VERSION = 5
uc.ERR_READ_UNMAPPED = 6
uc.ERR_WRITE_UNMAPPED = 7
uc.ERR_FETCH_UNMAPPED = 8
uc.ERR_HOOK = 9
uc.ERR_INSN_INVALID = 10
uc.ERR_MAP = 11
uc.ERR_WRITE_PROT = 12
uc.ERR_READ_PROT = 13
uc.ERR_FETCH_PROT = 14
uc.ERR_ARG = 15
uc.ERR_READ_UNALIGNED = 16
uc.ERR_WRITE_UNALIGNED = 17
uc.ERR_FETCH_UNALIGNED = 18
uc.ERR_HOOK_EXIST = 19
uc.ERR_RESOURCE = 20
uc.ERR_EXCEPTION = 21
uc.MEM_READ = 16
uc.MEM_WRITE = 17
uc.MEM_FETCH = 18
uc.MEM_READ_UNMAPPED = 19
uc.MEM_WRITE_UNMAPPED = 20
uc.MEM_FETCH_UNMAPPED = 21
uc.MEM_WRITE_PROT = 22
uc.MEM_READ_PROT = 23
uc.MEM_FETCH_PROT = 24
uc.MEM_READ_AFTER = 25
uc.HOOK_INTR = 1
uc.HOOK_INSN = 2
uc.HOOK_CODE = 4
uc.HOOK_BLOCK = 8
uc.HOOK_MEM_READ_UNMAPPED = 16
uc.HOOK_MEM_WRITE_UNMAPPED = 32
uc.HOOK_MEM_FETCH_UNMAPPED = 64
uc.HOOK_MEM_READ_PROT = 128
uc.HOOK_MEM_WRITE_PROT = 256
uc.HOOK_MEM_FETCH_PROT = 512
uc.HOOK_MEM_READ = 1024
uc.HOOK_MEM_WRITE = 2048
uc.HOOK_MEM_FETCH = 4096
uc.HOOK_MEM_READ_AFTER = 8192
uc.HOOK_MEM_UNMAPPED = 112
uc.HOOK_MEM_PROT = 896
uc.HOOK_MEM_READ_INVALID = 144
uc.HOOK_MEM_WRITE_INVALID = 288
uc.HOOK_MEM_FETCH_INVALID = 576
uc.HOOK_MEM_INVALID = 1008
uc.HOOK_MEM_VALID = 7168
uc.QUERY_MODE = 1
uc.QUERY_PAGE_SIZE = 2

uc.PROT_NONE = 0
uc.PROT_READ = 1
uc.PROT_WRITE = 2
uc.PROT_EXEC = 4
uc.PROT_ALL = 7
// For Unicorn Engine. AUTO-GENERATED FILE, DO NOT EDIT [arm64_const.py]

// ARM64 registers

uc.ARM64_REG_INVALID = 0
uc.ARM64_REG_X29 = 1
uc.ARM64_REG_X30 = 2
uc.ARM64_REG_NZCV = 3
uc.ARM64_REG_SP = 4
uc.ARM64_REG_WSP = 5
uc.ARM64_REG_WZR = 6
uc.ARM64_REG_XZR = 7
uc.ARM64_REG_B0 = 8
uc.ARM64_REG_B1 = 9
uc.ARM64_REG_B2 = 10
uc.ARM64_REG_B3 = 11
uc.ARM64_REG_B4 = 12
uc.ARM64_REG_B5 = 13
uc.ARM64_REG_B6 = 14
uc.ARM64_REG_B7 = 15
uc.ARM64_REG_B8 = 16
uc.ARM64_REG_B9 = 17
uc.ARM64_REG_B10 = 18
uc.ARM64_REG_B11 = 19
uc.ARM64_REG_B12 = 20
uc.ARM64_REG_B13 = 21
uc.ARM64_REG_B14 = 22
uc.ARM64_REG_B15 = 23
uc.ARM64_REG_B16 = 24
uc.ARM64_REG_B17 = 25
uc.ARM64_REG_B18 = 26
uc.ARM64_REG_B19 = 27
uc.ARM64_REG_B20 = 28
uc.ARM64_REG_B21 = 29
uc.ARM64_REG_B22 = 30
uc.ARM64_REG_B23 = 31
uc.ARM64_REG_B24 = 32
uc.ARM64_REG_B25 = 33
uc.ARM64_REG_B26 = 34
uc.ARM64_REG_B27 = 35
uc.ARM64_REG_B28 = 36
uc.ARM64_REG_B29 = 37
uc.ARM64_REG_B30 = 38
uc.ARM64_REG_B31 = 39
uc.ARM64_REG_D0 = 40
uc.ARM64_REG_D1 = 41
uc.ARM64_REG_D2 = 42
uc.ARM64_REG_D3 = 43
uc.ARM64_REG_D4 = 44
uc.ARM64_REG_D5 = 45
uc.ARM64_REG_D6 = 46
uc.ARM64_REG_D7 = 47
uc.ARM64_REG_D8 = 48
uc.ARM64_REG_D9 = 49
uc.ARM64_REG_D10 = 50
uc.ARM64_REG_D11 = 51
uc.ARM64_REG_D12 = 52
uc.ARM64_REG_D13 = 53
uc.ARM64_REG_D14 = 54
uc.ARM64_REG_D15 = 55
uc.ARM64_REG_D16 = 56
uc.ARM64_REG_D17 = 57
uc.ARM64_REG_D18 = 58
uc.ARM64_REG_D19 = 59
uc.ARM64_REG_D20 = 60
uc.ARM64_REG_D21 = 61
uc.ARM64_REG_D22 = 62
uc.ARM64_REG_D23 = 63
uc.ARM64_REG_D24 = 64
uc.ARM64_REG_D25 = 65
uc.ARM64_REG_D26 = 66
uc.ARM64_REG_D27 = 67
uc.ARM64_REG_D28 = 68
uc.ARM64_REG_D29 = 69
uc.ARM64_REG_D30 = 70
uc.ARM64_REG_D31 = 71
uc.ARM64_REG_H0 = 72
uc.ARM64_REG_H1 = 73
uc.ARM64_REG_H2 = 74
uc.ARM64_REG_H3 = 75
uc.ARM64_REG_H4 = 76
uc.ARM64_REG_H5 = 77
uc.ARM64_REG_H6 = 78
uc.ARM64_REG_H7 = 79
uc.ARM64_REG_H8 = 80
uc.ARM64_REG_H9 = 81
uc.ARM64_REG_H10 = 82
uc.ARM64_REG_H11 = 83
uc.ARM64_REG_H12 = 84
uc.ARM64_REG_H13 = 85
uc.ARM64_REG_H14 = 86
uc.ARM64_REG_H15 = 87
uc.ARM64_REG_H16 = 88
uc.ARM64_REG_H17 = 89
uc.ARM64_REG_H18 = 90
uc.ARM64_REG_H19 = 91
uc.ARM64_REG_H20 = 92
uc.ARM64_REG_H21 = 93
uc.ARM64_REG_H22 = 94
uc.ARM64_REG_H23 = 95
uc.ARM64_REG_H24 = 96
uc.ARM64_REG_H25 = 97
uc.ARM64_REG_H26 = 98
uc.ARM64_REG_H27 = 99
uc.ARM64_REG_H28 = 100
uc.ARM64_REG_H29 = 101
uc.ARM64_REG_H30 = 102
uc.ARM64_REG_H31 = 103
uc.ARM64_REG_Q0 = 104
uc.ARM64_REG_Q1 = 105
uc.ARM64_REG_Q2 = 106
uc.ARM64_REG_Q3 = 107
uc.ARM64_REG_Q4 = 108
uc.ARM64_REG_Q5 = 109
uc.ARM64_REG_Q6 = 110
uc.ARM64_REG_Q7 = 111
uc.ARM64_REG_Q8 = 112
uc.ARM64_REG_Q9 = 113
uc.ARM64_REG_Q10 = 114
uc.ARM64_REG_Q11 = 115
uc.ARM64_REG_Q12 = 116
uc.ARM64_REG_Q13 = 117
uc.ARM64_REG_Q14 = 118
uc.ARM64_REG_Q15 = 119
uc.ARM64_REG_Q16 = 120
uc.ARM64_REG_Q17 = 121
uc.ARM64_REG_Q18 = 122
uc.ARM64_REG_Q19 = 123
uc.ARM64_REG_Q20 = 124
uc.ARM64_REG_Q21 = 125
uc.ARM64_REG_Q22 = 126
uc.ARM64_REG_Q23 = 127
uc.ARM64_REG_Q24 = 128
uc.ARM64_REG_Q25 = 129
uc.ARM64_REG_Q26 = 130
uc.ARM64_REG_Q27 = 131
uc.ARM64_REG_Q28 = 132
uc.ARM64_REG_Q29 = 133
uc.ARM64_REG_Q30 = 134
uc.ARM64_REG_Q31 = 135
uc.ARM64_REG_S0 = 136
uc.ARM64_REG_S1 = 137
uc.ARM64_REG_S2 = 138
uc.ARM64_REG_S3 = 139
uc.ARM64_REG_S4 = 140
uc.ARM64_REG_S5 = 141
uc.ARM64_REG_S6 = 142
uc.ARM64_REG_S7 = 143
uc.ARM64_REG_S8 = 144
uc.ARM64_REG_S9 = 145
uc.ARM64_REG_S10 = 146
uc.ARM64_REG_S11 = 147
uc.ARM64_REG_S12 = 148
uc.ARM64_REG_S13 = 149
uc.ARM64_REG_S14 = 150
uc.ARM64_REG_S15 = 151
uc.ARM64_REG_S16 = 152
uc.ARM64_REG_S17 = 153
uc.ARM64_REG_S18 = 154
uc.ARM64_REG_S19 = 155
uc.ARM64_REG_S20 = 156
uc.ARM64_REG_S21 = 157
uc.ARM64_REG_S22 = 158
uc.ARM64_REG_S23 = 159
uc.ARM64_REG_S24 = 160
uc.ARM64_REG_S25 = 161
uc.ARM64_REG_S26 = 162
uc.ARM64_REG_S27 = 163
uc.ARM64_REG_S28 = 164
uc.ARM64_REG_S29 = 165
uc.ARM64_REG_S30 = 166
uc.ARM64_REG_S31 = 167
uc.ARM64_REG_W0 = 168
uc.ARM64_REG_W1 = 169
uc.ARM64_REG_W2 = 170
uc.ARM64_REG_W3 = 171
uc.ARM64_REG_W4 = 172
uc.ARM64_REG_W5 = 173
uc.ARM64_REG_W6 = 174
uc.ARM64_REG_W7 = 175
uc.ARM64_REG_W8 = 176
uc.ARM64_REG_W9 = 177
uc.ARM64_REG_W10 = 178
uc.ARM64_REG_W11 = 179
uc.ARM64_REG_W12 = 180
uc.ARM64_REG_W13 = 181
uc.ARM64_REG_W14 = 182
uc.ARM64_REG_W15 = 183
uc.ARM64_REG_W16 = 184
uc.ARM64_REG_W17 = 185
uc.ARM64_REG_W18 = 186
uc.ARM64_REG_W19 = 187
uc.ARM64_REG_W20 = 188
uc.ARM64_REG_W21 = 189
uc.ARM64_REG_W22 = 190
uc.ARM64_REG_W23 = 191
uc.ARM64_REG_W24 = 192
uc.ARM64_REG_W25 = 193
uc.ARM64_REG_W26 = 194
uc.ARM64_REG_W27 = 195
uc.ARM64_REG_W28 = 196
uc.ARM64_REG_W29 = 197
uc.ARM64_REG_W30 = 198
uc.ARM64_REG_X0 = 199
uc.ARM64_REG_X1 = 200
uc.ARM64_REG_X2 = 201
uc.ARM64_REG_X3 = 202
uc.ARM64_REG_X4 = 203
uc.ARM64_REG_X5 = 204
uc.ARM64_REG_X6 = 205
uc.ARM64_REG_X7 = 206
uc.ARM64_REG_X8 = 207
uc.ARM64_REG_X9 = 208
uc.ARM64_REG_X10 = 209
uc.ARM64_REG_X11 = 210
uc.ARM64_REG_X12 = 211
uc.ARM64_REG_X13 = 212
uc.ARM64_REG_X14 = 213
uc.ARM64_REG_X15 = 214
uc.ARM64_REG_X16 = 215
uc.ARM64_REG_X17 = 216
uc.ARM64_REG_X18 = 217
uc.ARM64_REG_X19 = 218
uc.ARM64_REG_X20 = 219
uc.ARM64_REG_X21 = 220
uc.ARM64_REG_X22 = 221
uc.ARM64_REG_X23 = 222
uc.ARM64_REG_X24 = 223
uc.ARM64_REG_X25 = 224
uc.ARM64_REG_X26 = 225
uc.ARM64_REG_X27 = 226
uc.ARM64_REG_X28 = 227
uc.ARM64_REG_V0 = 228
uc.ARM64_REG_V1 = 229
uc.ARM64_REG_V2 = 230
uc.ARM64_REG_V3 = 231
uc.ARM64_REG_V4 = 232
uc.ARM64_REG_V5 = 233
uc.ARM64_REG_V6 = 234
uc.ARM64_REG_V7 = 235
uc.ARM64_REG_V8 = 236
uc.ARM64_REG_V9 = 237
uc.ARM64_REG_V10 = 238
uc.ARM64_REG_V11 = 239
uc.ARM64_REG_V12 = 240
uc.ARM64_REG_V13 = 241
uc.ARM64_REG_V14 = 242
uc.ARM64_REG_V15 = 243
uc.ARM64_REG_V16 = 244
uc.ARM64_REG_V17 = 245
uc.ARM64_REG_V18 = 246
uc.ARM64_REG_V19 = 247
uc.ARM64_REG_V20 = 248
uc.ARM64_REG_V21 = 249
uc.ARM64_REG_V22 = 250
uc.ARM64_REG_V23 = 251
uc.ARM64_REG_V24 = 252
uc.ARM64_REG_V25 = 253
uc.ARM64_REG_V26 = 254
uc.ARM64_REG_V27 = 255
uc.ARM64_REG_V28 = 256
uc.ARM64_REG_V29 = 257
uc.ARM64_REG_V30 = 258
uc.ARM64_REG_V31 = 259

// pseudo registers
uc.ARM64_REG_PC = 260
uc.ARM64_REG_ENDING = 261

// alias registers
uc.ARM64_REG_IP1 = 215
uc.ARM64_REG_IP0 = 216
uc.ARM64_REG_FP = 1
uc.ARM64_REG_LR = 2
